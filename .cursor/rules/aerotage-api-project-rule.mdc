---
description: 
globs: 
alwaysApply: true
---
# Aerotage Time Reporting API - Core Development Rules

## 🏗️ Project Context
AWS serverless time reporting API with 46+ live endpoints across 10 functional domains (users, time-entries, projects, clients, reports, invoices, analytics, email-change, user-invitations, health).

**Environments**:
- **Development**: `https://time-api-dev.aerotage.com/`
- **Staging**: `https://time-api-staging.aerotage.com/` (if applicable)
- **Production**: `https://time-api.aerotage.com/`

**Stack**: AWS CDK + TypeScript + DynamoDB + API Gateway + Cognito + Lambda

## 📚 DOCUMENTATION AUTHORITY

**This cursor rules file is the SINGLE SOURCE OF TRUTH for development patterns.**

- ✅ **Follow ONLY these patterns** - Ignore conflicting guidance in other .md files
- ❌ **Other .md files may be outdated** - Many contain deprecated patterns being standardized
- 🔄 **Documentation cleanup in progress** - 52 files being reduced to 12 essential guides
- 📋 **When in doubt**: These cursor rules take precedence over any other documentation

## 🔐 CRITICAL: Authentication Standardization

### MANDATORY Lambda Pattern
```typescript
import { getCurrentUserId, getAuthenticatedUser } from '../shared/auth-helper';
import { createErrorResponse } from '../shared/response-helper';

export const handler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
  try {
    const currentUserId = getCurrentUserId(event);
    if (!currentUserId) {
      return createErrorResponse(401, 'UNAUTHORIZED', 'User authentication required');
    }

    const user = getAuthenticatedUser(event);
    const userRole = user?.role || 'employee';

    // Business logic here...
    
  } catch (error) {
    console.error('Function error:', error);
    return createErrorResponse(500, 'INTERNAL_ERROR', 'An internal server error occurred');
  }
};
```

### MANDATORY Database Access
```typescript
// ✅ CORRECT
import { UserRepository } from '../shared/user-repository';
const userRepo = new UserRepository();
const result = await userRepo.getUserById(userId);

// ❌ FORBIDDEN
const client = new DynamoDBClient({});
```

### MANDATORY Test Authentication
```javascript
const { getCognitoToken } = require('./scripts/get-cognito-token');

async function testEndpoints() {
  const authResult = await getCognitoToken('bhardwick@aerotage.com', 'Aerotage*2025');
  const token = authResult.AccessToken; // USE AccessToken, NOT IdToken
  
  const response = await makeRequest(`${API_BASE_URL}/endpoint`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
}
```

## 🏗️ AWS CDK Infrastructure Patterns

### 8-Stack Architecture Organization
```
Foundation Layer (Parallel Deployment):
├── CognitoStack      # Authentication & User Management
├── DatabaseStack     # DynamoDB Tables & Indexes  
├── StorageStack      # S3 Buckets (storage, invoices, exports)
└── SesStack          # Email Service & Templates

API Layer (Depends on Foundation):
└── ApiStack          # API Gateway + 46+ Lambda Functions

Supporting Services (Depends on API + Foundation):
├── DomainStack       # Route 53 + SSL + Custom Domains
├── DocumentationStack # S3 + CloudFront for Swagger UI
└── MonitoringStack   # CloudWatch Logs, Metrics & Alarms
```

### Stack Dependencies Pattern
```typescript
// Foundation stacks (independent)
const cognitoStack = new CognitoStack(app, `AerotageAuth-${stage}`, { stage, env, tags });
const databaseStack = new DatabaseStack(app, `AerotageDB-${stage}`, { stage, env, tags });
const storageStack = new StorageStack(app, `AerotageStorage-${stage}`, { stage, env, tags });
const sesStack = new SesStack(app, `AerotageSES-${stage}`, { stage, env, tags });

// API layer (depends on all foundation)
const apiStack = new ApiStack(app, `AerotageAPI-${stage}`, {
  stage, userPool: cognitoStack.userPool, tables: databaseStack.tables,
  storageBucket: storageStack.storageBucket, sesStack, env, tags
});

// Supporting services (depends on API + foundation)
const domainStack = new DomainStack(app, `AerotageDomain-${stage}`, {
  stage, restApi: apiStack.api, env, tags
});

// Explicit dependencies
apiStack.addDependency(cognitoStack);
apiStack.addDependency(databaseStack);
apiStack.addDependency(storageStack);
apiStack.addDependency(sesStack);
domainStack.addDependency(apiStack);
```

### Standard Lambda Function Creation
```typescript
const createLambdaFunction = (name: string, handler: string, description: string): lambdaNodejs.NodejsFunction => {
  return new lambdaNodejs.NodejsFunction(this, name, {
    functionName: `aerotage-${name.toLowerCase()}-${stage}`,
    entry: `lambda/${handler}.ts`,
    handler: 'handler',
    runtime: lambda.Runtime.NODEJS_20_X,
    timeout: cdk.Duration.seconds(30),
    memorySize: 256,
    environment: lambdaEnvironment,
    role: lambdaRole,
    bundling: {
      minify: false,
      sourceMap: false,
      target: 'es2020',
      externalModules: ['aws-sdk'],
    },
  });
};
```

## 🚫 FORBIDDEN Practices

### NO Dual Implementations
- ❌ NEVER create both `.ts` and `.js` versions of the same file
- ❌ If found, DELETE all `.js` files (they are compiled outputs)

### NO Direct AWS SDK Usage
- ❌ Direct DynamoDB client creation in Lambda functions
- ❌ Direct Cognito calls outside shared helpers
- ❌ Manual JWT validation

## 🔨 MANDATORY Build Process Rules

### CRITICAL: Build Commands Must Run from Correct Directory
```bash
# ✅ CORRECT - Always run from infrastructure directory
cd infrastructure
npm run build

# ✅ CORRECT - Infrastructure-specific builds
cd infrastructure && npm run deploy:dev
cd infrastructure && npm run synth

# ❌ FORBIDDEN - Never run TypeScript build from root
npm run build  # This compiles to wrong location!

# ❌ FORBIDDEN - Never run tsc from lib/ directory
cd infrastructure/lib && tsc *.ts  # Creates .js files in source!
```

### Build Directory Structure
```
✅ CORRECT:
infrastructure/
├── lib/*.ts          # Source TypeScript files
├── dist/lib/*.js     # Compiled output (gitignored)
└── tsconfig.json     # outDir: "./dist"

❌ FORBIDDEN:
infrastructure/
├── lib/*.ts          # Source files
├── lib/*.js          # ❌ Dual implementations!
```

### AI Assistant Rules for Builds
- **ALWAYS** `cd infrastructure` before running build commands
- **NEVER** run `npm run build` from project root for infrastructure
- **VERIFY** working directory before executing build commands
- **DELETE** any `.js` files found in `infrastructure/lib/` or `infrastructure/bin/`

## 📂 Functional Domain Structure
```
infrastructure/lambda/
├── shared/           # auth-helper, response-helper, repositories
├── users/           # create, update, delete, list
├── time-entries/    # create, update, delete, list, bulk-operations
├── projects/        # create, update, delete, list, assignments
├── clients/         # create, update, delete, list
├── reports/         # generate, export, scheduled
├── invoices/        # generate, export, templates
├── analytics/       # dashboard, metrics, insights
├── email-change/    # request, confirm, validate
├── user-invitations/ # send, accept, resend
└── health/          # health-check (public endpoint)
```

## 🎯 Response Format Standard
```typescript
// Success: { "success": true, "data": {...} }
// Error: { "success": false, "error": { "code": "ERROR_CODE", "message": "Description" } }
```

## 🔧 Environment Variables Standard
```typescript
const lambdaEnvironment = {
  STAGE: stage,
  USER_POOL_ID: userPool.userPoolId,
  USER_SESSIONS_TABLE: tables.userSessionsTable.tableName,
  USERS_TABLE: tables.usersTable.tableName,
  AWS_REGION: process.env.AWS_REGION || 'us-east-1',
  // ... other domain-specific tables
};
```

## ✅ Verification Checklist
When implementing new functionality:
1. Uses `getCurrentUserId()` and `getAuthenticatedUser()` from shared helpers
2. Implements repository pattern for database access
3. Returns standardized response format
4. Includes comprehensive error handling
5. Test scripts use `getCognitoToken()` authentication
6. No dual TypeScript/JavaScript implementations exist
7. Follows domain-specific folder structure
8. IAM permissions properly scoped to function needs
9. **Build commands run from `infrastructure/` directory only**
10. **No `.js` files exist in `infrastructure/lib/` or `infrastructure/bin/`**

---

**Focus**: This is a production system with 52+ Lambda functions. Follow these core patterns to maintain consistency and prevent authentication issues. 
---
description: 
globs: 
alwaysApply: true
---
# Aerotage Time Reporting API - Backend Repository - Cursor Rules

## 🏗️ Repository Architecture Overview

This project uses a **two-repository architecture** to separate concerns:

### 🚀 **aerotage-time-reporting-api** (THIS REPOSITORY)
**Purpose**: Backend AWS serverless infrastructure and API
**Current Status**: ✅ **Phase 1-3 Complete, Infrastructure Deployed**
**Contains**:
- AWS CDK infrastructure code (TypeScript) - ✅ **DEPLOYED**
- AWS Lambda function implementations - ✅ **30+ FUNCTIONS OPERATIONAL**
- DynamoDB table definitions and schema - ✅ **8 TABLES WITH GSIs**
- API Gateway REST API configurations - ✅ **15+ ENDPOINTS LIVE**
- AWS Cognito authentication infrastructure - ✅ **FULLY CONFIGURED**
- CloudWatch monitoring and logging setup - ✅ **ACTIVE MONITORING**
- S3 storage bucket configurations - ✅ **DEPLOYED**
- IAM roles and security policies - ✅ **LEAST PRIVILEGE**
- Comprehensive documentation - ✅ **COMPLETE**

### 📱 **aerotage_time_reporting_app** (SEPARATE REPOSITORY)
**Purpose**: Frontend Electron desktop application
**Current Status**: 🔄 **Integration Phase**
**Contains**: 
- Electron main process, renderer, and preload scripts
- React/TypeScript frontend code
- UI components, pages, and styling
- State management (React Context)
- Frontend configuration and build tools
- Documentation specific to frontend development

### 🔄 **Repository Interaction Rules**
1. **Backend NEVER contains**: Electron code, React components, frontend styling, UI logic
2. **Frontend NEVER contains**: AWS CDK code, Lambda functions, infrastructure definitions
3. **API Endpoints**: ✅ **15+ endpoints implemented and documented**
4. **Authentication**: ✅ **Cognito fully configured, frontend integration ready**
5. **Deployment**: ✅ **Backend infrastructure deployed and operational**

## 📊 Current Project Status

### ✅ **Completed Features (Production Ready)**
- **User Management**: Profile CRUD, preferences, role-based access
- **Authentication & Security**: JWT tokens, password reset, MFA support
- **Session Management**: Multi-session tracking, device management
- **User Invitations**: Email-based invitation system with role assignment
- **Email Service**: SES integration with professional templates
- **Infrastructure**: Complete AWS CDK deployment with monitoring

### 🔄 **Current Focus**
- **Frontend Integration**: API client implementation and testing
- **Performance Optimization**: Load testing and optimization
- **Production Deployment**: Staging and production environment setup

### 📋 **Next Development Phases**
- **Phase 4**: Time Entry Management (CRUD, timers, approval workflow)
- **Phase 5**: Project & Client Management (projects, teams, budgets)
- **Phase 6**: Reporting & Analytics (time reports, business intelligence)
- **Phase 7**: Invoice Generation (automated billing, PDF generation)

## 🌐 Current Infrastructure

### **Live Environment Details**
- **API Base URL**: `https://0z6kxagbh2.execute-api.us-east-1.amazonaws.com/dev/`
- **API Documentation**: `https://d2xyhdliouir95.cloudfront.net` (Interactive Swagger UI)
- **Cognito User Pool**: `us-east-1_EsdlgX9Qg`
- **App Client**: `148r35u6uultp1rmfdu22i8amb`
- **Identity Pool**: `us-east-1:d79776bb-4b8e-4654-a10a-a45b1adaa787`
- **Environment**: Development (staging/production ready for deployment)

### **Deployed AWS Resources**
- ✅ **6 CDK Stacks**: Auth, Database, API, Storage, Documentation, Monitoring
- ✅ **8 DynamoDB Tables**: Users, profiles, preferences, sessions, invitations, etc.
- ✅ **30+ Lambda Functions**: All user management and security endpoints
- ✅ **S3 Buckets**: File storage with lifecycle policies + documentation hosting
- ✅ **CloudFront**: CDN for OpenAPI documentation hosting
- ✅ **CloudWatch**: Comprehensive monitoring and alerting
- ✅ **SES**: Email service with professional templates
- ✅ **OpenAPI Documentation**: Interactive Swagger UI with live API testing

## Core Technology Stack

### Infrastructure & Deployment
- **Infrastructure as Code**: AWS CDK v2 with TypeScript ✅ **DEPLOYED**
- **Compute**: AWS Lambda functions (Node.js 20.x) ✅ **30+ FUNCTIONS**
- **API**: Amazon API Gateway (REST API) ✅ **OPERATIONAL**
- **Database**: Amazon DynamoDB (optimized table design) ✅ **8 TABLES**
- **Authentication**: Amazon Cognito (User Pools + Identity Pools) ✅ **CONFIGURED**
- **Storage**: Amazon S3 (file uploads, exports) ✅ **DEPLOYED**
- **Email**: Amazon SES (templates, delivery tracking) ✅ **ACTIVE**
- **Monitoring**: Amazon CloudWatch (logs, metrics, alarms) ✅ **MONITORING**
- **Security**: AWS IAM (least privilege access) ✅ **IMPLEMENTED**

### Development Tools
- **Language**: TypeScript (strict mode)
- **Package Manager**: npm
- **Linting**: ESLint with AWS CDK recommended rules
- **Testing**: Jest for unit tests, AWS CDK testing constructs
- **Deployment**: AWS CDK CLI with multiple environments

## 📡 Implemented API Endpoints

### ✅ **Live Endpoints (Production Ready)**

#### **User Management**
- `GET /users` - List all users (admin/manager)
- `GET /users/{id}/profile` - Get user profile
- `PUT /users/{id}/profile` - Update user profile
- `GET /users/{id}/preferences` - Get user preferences
- `PUT /users/{id}/preferences` - Update user preferences

#### **Security & Authentication**
- `PUT /users/{id}/password` - Change password
- `GET /users/{id}/security-settings` - Get security settings
- `PUT /users/{id}/security-settings` - Update security settings

#### **Session Management**
- `GET /users/{id}/sessions` - List user sessions
- `POST /users/{id}/sessions` - Create session record
- `DELETE /users/{id}/sessions/{sessionId}` - Terminate session

#### **User Invitations**
- `GET /user-invitations` - List invitations
- `POST /user-invitations` - Create invitation
- `POST /user-invitations/{id}/resend` - Resend invitation
- `DELETE /user-invitations/{id}` - Cancel invitation
- `GET /user-invitations/validate/{token}` - Validate token (public)
- `POST /user-invitations/accept` - Accept invitation (public)

### 📋 **Planned Endpoints (Future Phases)**
- `/time-entries/*` - Time tracking (Phase 4)
- `/projects/*` - Project management (Phase 5)
- `/teams/*` - Team management (Phase 5)
- `/clients/*` - Client management (Phase 5)
- `/reports/*` - Reporting & analytics (Phase 6)
- `/invoices/*` - Invoice generation (Phase 7)

## File Structure Rules

```
infrastructure/
├── bin/
│   └── aerotage-time-api.ts          # ✅ CDK app entry point
├── lib/
│   ├── cognito-stack.ts              # ✅ Authentication infrastructure
│   ├── database-stack.ts             # ✅ DynamoDB tables and indexes
│   ├── api-stack.ts                  # ✅ API Gateway and Lambda integrations
│   ├── storage-stack.ts              # ✅ S3 buckets and policies
│   ├── ses-stack.ts                  # ✅ Email service configuration
│   ├── documentation-stack.ts        # ✅ OpenAPI/Swagger UI hosting
│   └── monitoring-stack.ts           # ✅ CloudWatch logs, metrics, alarms
├── lambda/
│   ├── users/                        # ✅ User management functions (6 endpoints)
│   ├── security/                     # ✅ Security and auth functions (3 endpoints)
│   ├── sessions/                     # ✅ Session management functions (3 endpoints)
│   ├── invitations/                  # ✅ User invitation functions (6 endpoints)
│   ├── time-entries/                 # 📋 Time tracking (Phase 4)
│   ├── projects/                     # 📋 Project management (Phase 5)
│   ├── clients/                      # 📋 Client management (Phase 5)
│   ├── teams/                        # 📋 Team management (Phase 5)
│   ├── reports/                      # 📋 Reporting (Phase 6)
│   └── invoices/                     # 📋 Invoice generation (Phase 7)
├── test/                             # ✅ CDK and Lambda unit tests
├── scripts/                          # ✅ Build and utility scripts
│   └── build-openapi.js              # ✅ OpenAPI specification builder
├── docs/                             # ✅ Comprehensive API documentation
│   ├── README.md                     # Documentation navigation
│   ├── API_REFERENCE.md              # Complete API documentation
│   ├── openapi.yaml                  # ✅ OpenAPI 3.0 specification
│   ├── OPENAPI_DOCUMENTATION.md      # ✅ OpenAPI system documentation
│   ├── swagger-ui/                   # ✅ Swagger UI hosting files
│   ├── PROJECT_STATUS.md             # Current implementation status
│   ├── SECURITY_GUIDE.md             # Security implementation
│   ├── DEPLOYMENT_GUIDE.md           # Infrastructure deployment
│   ├── FRONTEND_INTEGRATION_GUIDE.md # Frontend integration
│   ├── DEVELOPMENT.md                # Development setup
│   ├── LINTING_GUIDE.md              # Code quality standards
│   └── TROUBLESHOOTING.md            # Issue resolution
├── cdk.json                          # ✅ CDK configuration
├── package.json                      # ✅ Dependencies and scripts
└── tsconfig.json                     # ✅ TypeScript configuration

# IMPORTANT: NO src/renderer/, public/, or Electron-related files
# Frontend code is maintained in aerotage_time_reporting_app repo
```

## Development Priorities

### **Current Sprint Focus**
1. **Frontend Integration Support**: Help with API client implementation
2. **Performance Optimization**: Monitor and optimize existing endpoints
3. **Testing Enhancement**: Improve test coverage and integration tests
4. **Documentation Updates**: Keep API docs current with any changes

### **Next Sprint Preparation**
1. **Phase 4 Planning**: Design time entry management APIs
2. **Database Schema**: Plan time entry table structure and GSIs
3. **Timer Functionality**: Design start/stop/pause timer endpoints
4. **Approval Workflow**: Design manager approval process

### **Production Readiness**
1. **Staging Environment**: Deploy to staging for QA testing
2. **Performance Testing**: Load testing and optimization
3. **Security Review**: Final security audit and penetration testing
4. **Monitoring Enhancement**: Production-grade monitoring and alerting

## AWS CDK Development Rules

### Stack Organization (✅ **IMPLEMENTED**)
1. **Single Responsibility**: Each stack has one clear purpose
2. **Environment Isolation**: Separate stacks for dev/staging/prod
3. **Resource Naming**: Consistent naming with environment prefixes
4. **Cross-Stack References**: CloudFormation exports for shared resources
5. **Stack Dependencies**: Explicit dependencies defined

### Current Stack Status
- ✅ **CognitoStack**: Authentication and user management
- ✅ **DatabaseStack**: DynamoDB tables with optimized GSIs
- ✅ **ApiStack**: API Gateway with 30+ Lambda functions
- ✅ **StorageStack**: S3 buckets with lifecycle policies
- ✅ **SESStack**: Email service with professional templates
- ✅ **DocumentationStack**: OpenAPI/Swagger UI hosting with CloudFront
- ✅ **MonitoringStack**: CloudWatch monitoring and alerting

## Lambda Function Development Rules

### Function Structure (✅ **IMPLEMENTED**)
1. **Single Purpose**: Each function has one specific responsibility
2. **Handler Pattern**: Consistent handler pattern across all functions
3. **Error Handling**: Comprehensive error handling and logging
4. **Input Validation**: All inputs validated using TypeScript types
5. **Response Format**: Consistent API response format

### Current Function Status
- ✅ **30+ Functions Deployed**: All user management and security endpoints
- ✅ **Standardized Response Format**: Consistent JSON responses
- ✅ **Error Handling**: Comprehensive error handling implemented
- ✅ **Input Validation**: All inputs validated and sanitized
- ✅ **Monitoring**: CloudWatch logging and metrics active

### Function Template (✅ **STANDARDIZED**)
```typescript
import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';
import { DynamoDBClient } from '@aws-sdk/client-dynamodb';

export const handler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
  try {
    // Input validation
    // Business logic
    // Return success response
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({ success: true, data: result })
    };
  } catch (error) {
    console.error('Function error:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ success: false, error: 'Internal server error' })
    };
  }
};
```

## Database Design Rules (✅ **IMPLEMENTED**)

### Current Database Status
- ✅ **8 DynamoDB Tables**: Optimized for current access patterns
- ✅ **Global Secondary Indexes**: Efficient querying for all endpoints
- ✅ **Data Encryption**: All tables encrypted at rest
- ✅ **Backup Strategy**: Point-in-time recovery enabled
- ✅ **Performance**: <200ms average response time

### Implemented Tables
1. **aerotage-main-table-dev**: Primary data table
2. **aerotage-user-profiles-dev**: User profile information
3. **aerotage-user-preferences-dev**: User preferences and settings
4. **aerotage-user-security-settings-dev**: Security configuration
5. **aerotage-password-history-dev**: Password history tracking
6. **aerotage-user-sessions-dev**: Session management
7. **aerotage-user-invitations-dev**: Invitation system
8. **aerotage-user-activity-dev**: Activity logging

## Security Implementation (✅ **ENTERPRISE-GRADE**)

### Authentication & Authorization (✅ **IMPLEMENTED**)
- ✅ **JWT Tokens**: Cognito JWT tokens for API authentication
- ✅ **Role-Based Access**: Admin, Manager, Employee roles implemented
- ✅ **Password Security**: Strong policies, reset flow, history tracking
- ✅ **Session Management**: Multi-session tracking and control
- ✅ **Account Security**: Lockout protection, MFA support

### Security Features Status
- ✅ **Password Reset**: Email-based reset with secure codes
- ✅ **Security Settings**: User-configurable security options
- ✅ **Session Tracking**: IP, device, location tracking
- ✅ **Audit Logging**: Comprehensive security event logging
- ✅ **Rate Limiting**: Built-in protection against abuse

## API Design Rules (✅ **IMPLEMENTED**)

### REST API Status
- ✅ **15+ Endpoints**: All user management and security endpoints live
- ✅ **Consistent Format**: Standardized request/response format
- ✅ **Error Handling**: Comprehensive error responses
- ✅ **Authentication**: Cognito JWT validation on all endpoints
- ✅ **CORS**: Configured for frontend integration
- ✅ **Rate Limiting**: Per-endpoint throttling implemented

### Response Format (✅ **STANDARDIZED**)
```typescript
// Success Response
{
  "success": true,
  "data": { /* response data */ }
}

// Error Response
{
  "success": false,
  "error": {
    "code": "ERROR_CODE",
    "message": "Human readable message",
    "details": { /* additional context */ }
  }
}
```

## Deployment & Environment Management (✅ **OPERATIONAL**)

### Environment Status
- ✅ **Development**: Fully operational with all features
- 📋 **Staging**: Ready for deployment
- 📋 **Production**: Infrastructure ready, pending final testing

### Deployment Commands (✅ **WORKING**)
```bash
# Development environment (✅ DEPLOYED)
npm run deploy:dev

# Staging environment (📋 READY)
npm run deploy:staging

# Production environment (📋 READY)
npm run deploy:prod

# Destroy environment (dev/staging only)
npm run destroy:dev
```

## Monitoring & Observability (✅ **ACTIVE**)

### CloudWatch Status
- ✅ **Structured Logging**: JSON format for all log messages
- ✅ **Custom Metrics**: Business KPIs tracking
- ✅ **Alarms**: Error rates, latency, and cost monitoring
- ✅ **Dashboards**: Real-time system health monitoring
- ✅ **SNS Alerts**: Production alert notifications

### Performance Metrics (✅ **MONITORED**)
- **API Response Time**: <200ms average
- **Error Rate**: <1% in development
- **Lambda Duration**: Optimized memory allocation
- **DynamoDB Performance**: Efficient query patterns
- **Cost Monitoring**: Billing alerts and anomaly detection

## Testing Requirements (✅ **IMPLEMENTED**)

### Test Coverage Status
- ✅ **Unit Tests**: 80%+ coverage for critical functions
- ✅ **Integration Tests**: End-to-end API workflows
- ✅ **Authentication Tests**: Cognito integration scenarios
- ✅ **Security Tests**: Password policies and validation
- ✅ **Manual Testing**: All endpoints verified

## Documentation Status (✅ **COMPREHENSIVE**)

### Available Documentation
- ✅ **Interactive API Documentation**: Live Swagger UI with testing capabilities
- ✅ **OpenAPI Specification**: Complete OpenAPI 3.0 YAML specification
- ✅ **API Reference**: Complete endpoint documentation
- ✅ **OpenAPI System Guide**: Documentation system setup and usage
- ✅ **Project Status**: Current implementation status
- ✅ **Security Guide**: Security features and implementation
- ✅ **Deployment Guide**: Infrastructure deployment instructions
- ✅ **Frontend Integration**: Complete integration guide
- ✅ **Troubleshooting**: Common issues and solutions
- ✅ **Development Guide**: Local development setup

## Development Workflow (✅ **ESTABLISHED**)

### Git Practices
1. **Conventional Commits**: Use conventional commit format
2. **Feature Branches**: Create branches for each feature/fix
3. **Pull Requests**: Require code review for all changes
4. **Deployment Tags**: Tag deployments with version numbers
5. **Documentation Updates**: Update docs with all changes

### Code Quality (✅ **ENFORCED**)
- ✅ **TypeScript**: Strict mode enabled
- ✅ **ESLint**: AWS CDK recommended rules
- ✅ **Testing**: Comprehensive test coverage
- ✅ **Documentation**: All APIs documented

## Prohibited Practices

### Never Do
- Store secrets or credentials in code or environment variables
- Use deprecated AWS services or APIs
- Implement custom authentication instead of using Cognito
- Create overly broad IAM permissions
- Deploy directly to production without testing
- Use console.log in production (use proper logging)
- Hardcode environment-specific values
- Skip input validation for Lambda functions
- Create circular dependencies between stacks
- Use deprecated CDK constructs
- **Add frontend code (React, Electron, UI) to this repository** ❌
- **Store frontend dependencies in package.json** ❌
- **Implement UI logic in Lambda functions** ❌
- **Include build tools for frontend applications** ❌

### Always Do
- Follow AWS Well-Architected Framework principles
- Use CDK best practices and design patterns
- Implement proper error handling and logging
- Test infrastructure changes in non-production environments
- Use least privilege access for all IAM roles
- Monitor resource costs and optimize regularly
- Document API changes and breaking changes
- Version APIs and maintain backward compatibility
- **Keep infrastructure and API logic separate from frontend** ✅
- **Coordinate API changes with frontend team** ✅
- **Deploy backend infrastructure before frontend testing** ✅
- **Maintain API documentation for frontend consumption** ✅

## Current Development Context

### **When Working on This Project**
1. **Infrastructure is DEPLOYED**: Focus on optimization and new features
2. **APIs are LIVE**: Test against actual deployed endpoints
3. **Documentation is CURRENT**: Refer to `/docs` for accurate information
4. **Frontend Integration**: Support frontend team with API integration
5. **Next Phase Planning**: Prepare for time tracking implementation

### **Key Resources**
- **API Base URL**: `https://0z6kxagbh2.execute-api.us-east-1.amazonaws.com/dev/`
- **Interactive API Docs**: `https://d2xyhdliouir95.cloudfront.net` (Live Swagger UI)
- **OpenAPI Specification**: `/docs/openapi.yaml` for API specification
- **Documentation**: `/docs` directory with comprehensive guides
- **Project Status**: `/docs/PROJECT_STATUS.md` for current state
- **API Reference**: `/docs/API_REFERENCE.md` for endpoint details
- **Security Guide**: `/docs/SECURITY_GUIDE.md` for security features

### **Development Priorities**
1. **Support frontend integration** with existing APIs
2. **Optimize performance** of deployed endpoints
3. **Plan Phase 4** time tracking features
4. **Maintain documentation** accuracy
5. **Prepare for production** deployment

Remember: This repository contains a **production-ready backend infrastructure** with **15+ live API endpoints**. The focus is now on **frontend integration support**, **performance optimization**, and **planning the next development phases** for time tracking and project management features.

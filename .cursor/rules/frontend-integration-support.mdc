---
description: 
globs: 
alwaysApply: false
---
# Frontend Integration Support Rules

## API Integration Patterns

### Authentication Flow
- **ALWAYS use**: `getCognitoToken()` from `scripts/get-cognito-token.js` for test scripts
- **NEVER use**: Direct AWS SDK calls in frontend integration code
- **Token format**: Use `AccessToken` (NOT `IdToken`) from Cognito response
- **Headers**: `Authorization: Bearer ${accessToken}`

### Base API Client Pattern
```typescript
class ApiClient {
  private baseUrl = 'https://time-api-dev.aerotage.com/';
  
  private async request<T>(endpoint: string, options: RequestOptions = {}): Promise<T> {
    const token = localStorage.getItem('accessToken');
    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    };
    // Handle response format: { success: boolean, data: T, error?: object }
  }
}
```

### Error Handling Standards
- **Check**: `response.success` before accessing `response.data`
- **Display**: `error.message` to users for failed requests
- **Handle**: 401 → redirect to login, 403 → show permissions error

## AWS Cognito Configuration
```typescript
const awsConfig = {
  Auth: {
    region: 'us-east-1',
    userPoolId: 'us-east-1_EsdlgX9Qg',
    userPoolWebClientId: '148r35u6uultp1rmfdu22i8amb',
    identityPoolId: 'us-east-1:d79776bb-4b8e-4654-a10a-a45b1adaa787'
  }
};
```

## Session Management
- **Login**: Create backend session record after Cognito auth
- **Logout**: Terminate backend session before Cognito signout
- **Storage**: Store JWT token and session info in localStorage

## Common Integration Issues

### CORS Problems
- Backend CORS already configured for frontend integration
- If errors persist: verify API base URL and request headers

### Authentication Failures  
- **401 errors**: Check token exists, format (should contain dots), expiration
- **403 errors**: Verify user permissions and role-based access

### Session Migration
- **Response code**: `SESSION_MIGRATION_REQUIRED`
- **Action**: Clear localStorage and force re-login

## Verification Steps
When implementing frontend integration:
1. Verify JWT token is stored correctly after login
2. Confirm Authorization header is included in all API requests  
3. Test error handling for 401, 403, and 500 responses
4. Validate session cleanup on logout
5. Check API response format matches: `{ success: boolean, data: any }`

## Live Environment
- **API URL**: `https://time-api-dev.aerotage.com/`
- **Endpoints**: 46+ live endpoints across all business functions
- **Status**: Production-ready backend, ready for complete frontend integration

@api-response-types.ts
@auth-config.ts

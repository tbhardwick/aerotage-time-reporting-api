---
description: 
globs: 
alwaysApply: false
---
# Production Deployment - Specialized Rules

## 🎯 Context: Production Deployment Preparation

**Use this rule when**: Preparing for production deployment, implementing production security measures, performance optimization, or production environment management.

## 🚀 Current Production Readiness Status

### ✅ **Development Environment Complete**
- **Infrastructure**: 5 CDK stacks deployed and operational
- **API Endpoints**: 15+ endpoints tested and documented
- **Authentication**: Enterprise-grade Cognito configuration
- **Database**: 8 DynamoDB tables with optimized performance
- **Monitoring**: Comprehensive CloudWatch monitoring
- **Documentation**: Complete API and deployment guides

### 📋 **Production Deployment Checklist**

#### **Infrastructure Preparation**
- [ ] **Domain & SSL**: Configure custom domain with SSL certificates
- [ ] **SES Production**: Move from sandbox to production email service
- [ ] **Environment Variables**: Production-specific configuration
- [ ] **IAM Roles**: Review and tighten production permissions
- [ ] **Backup Strategy**: Implement automated backup procedures
- [ ] **Disaster Recovery**: Document recovery procedures

#### **Security Hardening**
- [ ] **API Gateway**: Configure production rate limiting
- [ ] **Cognito**: Enable advanced security features
- [ ] **DynamoDB**: Enable point-in-time recovery
- [ ] **CloudWatch**: Configure security monitoring alerts
- [ ] **WAF**: Implement Web Application Firewall
- [ ] **VPC**: Consider VPC deployment for enhanced security

#### **Performance Optimization**
- [ ] **Lambda**: Optimize memory allocation and cold starts
- [ ] **DynamoDB**: Configure auto-scaling and reserved capacity
- [ ] **API Caching**: Implement CloudFront or API Gateway caching
- [ ] **Connection Pooling**: Optimize database connections
- [ ] **Bundle Optimization**: Minimize Lambda deployment packages

## 🌐 Production Environment Configuration

### **Domain and SSL Setup**
```typescript
// Production domain configuration
const productionDomain = {
  domainName: 'api.aerotage.com',
  certificateArn: 'arn:aws:acm:us-east-1:ACCOUNT:certificate/CERT-ID',
  hostedZoneId: 'Z1234567890ABC',
  
  // API Gateway custom domain
  customDomain: {
    domainName: 'api.aerotage.com',
    certificateArn: 'arn:aws:acm:us-east-1:ACCOUNT:certificate/CERT-ID',
    endpointType: apigateway.EndpointType.REGIONAL,
    securityPolicy: apigateway.SecurityPolicy.TLS_1_2
  }
};

// Route 53 configuration
const apiRecord = new route53.ARecord(this, 'ApiRecord', {
  zone: hostedZone,
  target: route53.RecordTarget.fromAlias(
    new targets.ApiGatewayDomain(customDomain)
  )
});
```

### **SES Production Configuration**
```typescript
// Move from Cognito default email to SES
const userPool = new cognito.UserPool(this, 'UserPool', {
  // Production email configuration
  email: cognito.UserPoolEmail.withSES({
    fromEmail: 'noreply@aerotage.com',
    fromName: 'Aerotage Time Reporting',
    replyToEmail: 'support@aerotage.com',
    sesRegion: 'us-east-1',
    sesVerifiedDomain: 'aerotage.com'
  }),
  
  // Enhanced security for production
  advancedSecurityMode: cognito.AdvancedSecurityMode.ENFORCED,
  deviceTracking: {
    challengeRequiredOnNewDevice: true,
    deviceOnlyRememberedOnUserPrompt: false
  }
});

// SES configuration requirements
const sesConfiguration = {
  verifiedDomain: 'aerotage.com',
  dkimEnabled: true,
  bounceNotifications: true,
  complaintNotifications: true,
  deliveryNotifications: false,
  
  // Email templates
  templates: [
    'UserInvitation',
    'PasswordReset', 
    'WelcomeEmail',
    'AccountLockout',
    'SecurityAlert'
  ]
};
```

### **Production Environment Variables**
```typescript
// Production-specific configuration
const productionConfig = {
  // Environment
  stage: 'prod',
  region: 'us-east-1',
  
  // API Configuration
  apiDomainName: 'api.aerotage.com',
  corsOrigins: ['https://app.aerotage.com'],
  
  // Security
  jwtTokenExpiry: '1h',
  refreshTokenExpiry: '30d',
  sessionTimeout: 3600, // 1 hour
  maxFailedLoginAttempts: 5,
  accountLockoutDuration: 1800, // 30 minutes
  
  // Rate Limiting
  apiRateLimit: {
    burstLimit: 100,
    rateLimit: 50
  },
  
  // Monitoring
  logLevel: 'INFO',
  enableXRayTracing: true,
  
  // Email
  emailDomain: 'aerotage.com',
  supportEmail: 'support@aerotage.com',
  
  // Database
  enableBackup: true,
  backupRetentionDays: 30,
  enablePointInTimeRecovery: true
};
```

## 🔒 Production Security Configuration

### **Enhanced Cognito Security**
```typescript
const productionUserPool = new cognito.UserPool(this, 'ProdUserPool', {
  // Advanced security features
  advancedSecurityMode: cognito.AdvancedSecurityMode.ENFORCED,
  
  // Password policy
  passwordPolicy: {
    minLength: 12,
    requireLowercase: true,
    requireUppercase: true,
    requireDigits: true,
    requireSymbols: true,
    tempPasswordValidity: Duration.days(1) // Reduced from 7 days
  },
  
  // Account recovery
  accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,
  
  // Device tracking
  deviceTracking: {
    challengeRequiredOnNewDevice: true,
    deviceOnlyRememberedOnUserPrompt: false
  },
  
  // User verification
  autoVerify: {
    email: true
  },
  
  // Sign-in configuration
  signInAliases: {
    email: true,
    username: false,
    phone: false
  },
  
  // Lambda triggers for enhanced security
  lambdaTriggers: {
    preAuthentication: preAuthFunction,
    postAuthentication: postAuthFunction,
    preSignUp: preSignUpFunction
  }
});
```

### **API Gateway Security**
```typescript
// Production API Gateway configuration
const api = new apigateway.RestApi(this, 'ProdApi', {
  // CORS configuration
  defaultCorsPreflightOptions: {
    allowOrigins: ['https://app.aerotage.com'], // Specific domain only
    allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowHeaders: [
      'Content-Type',
      'X-Amz-Date',
      'Authorization',
      'X-Api-Key',
      'X-Amz-Security-Token'
    ],
    maxAge: Duration.hours(1)
  },
  
  // Throttling
  deployOptions: {
    throttle: {
      burstLimit: 100,
      rateLimit: 50
    },
    
    // Logging
    loggingLevel: apigateway.MethodLoggingLevel.INFO,
    dataTraceEnabled: false, // Disable in production for security
    metricsEnabled: true
  },
  
  // API Key requirement for additional security
  apiKeySourceType: apigateway.ApiKeySourceType.HEADER
});

// WAF for additional protection
const webAcl = new wafv2.CfnWebACL(this, 'ApiWebAcl', {
  scope: 'REGIONAL',
  defaultAction: { allow: {} },
  rules: [
    {
      name: 'RateLimitRule',
      priority: 1,
      statement: {
        rateBasedStatement: {
          limit: 2000,
          aggregateKeyType: 'IP'
        }
      },
      action: { block: {} },
      visibilityConfig: {
        sampledRequestsEnabled: true,
        cloudWatchMetricsEnabled: true,
        metricName: 'RateLimitRule'
      }
    }
  ]
});
```

### **DynamoDB Production Security**
```typescript
// Production DynamoDB configuration
const table = new dynamodb.Table(this, 'ProdTable', {
  // Encryption
  encryption: dynamodb.TableEncryption.AWS_MANAGED,
  
  // Backup
  pointInTimeRecovery: true,
  
  // Deletion protection
  removalPolicy: RemovalPolicy.RETAIN,
  
  // Billing mode
  billingMode: dynamodb.BillingMode.ON_DEMAND, // Or PROVISIONED with auto-scaling
  
  // Stream for audit logging
  stream: dynamodb.StreamViewType.NEW_AND_OLD_IMAGES
});

// Auto-scaling for provisioned tables
if (billingMode === 'PROVISIONED') {
  table.autoScaleReadCapacity({
    minCapacity: 5,
    maxCapacity: 100
  }).scaleOnUtilization({
    targetUtilizationPercent: 70
  });
  
  table.autoScaleWriteCapacity({
    minCapacity: 5,
    maxCapacity: 100
  }).scaleOnUtilization({
    targetUtilizationPercent: 70
  });
}
```

## 📊 Production Monitoring & Alerting

### **Enhanced CloudWatch Configuration**
```typescript
// Production monitoring stack
export class ProductionMonitoringStack extends Stack {
  constructor(scope: Construct, id: string, props: StackProps) {
    super(scope, id, props);
    
    // Critical alarms
    const criticalAlarms = [
      // API Gateway errors
      new cloudwatch.Alarm(this, 'ApiErrorRate', {
        metric: api.metricServerError(),
        threshold: 5, // 5% error rate
        evaluationPeriods: 2,
        treatMissingData: cloudwatch.TreatMissingData.NOT_BREACHING
      }),
      
      // Lambda errors
      new cloudwatch.Alarm(this, 'LambdaErrorRate', {
        metric: lambdaFunction.metricErrors(),
        threshold: 10,
        evaluationPeriods: 2
      }),
      
      // DynamoDB throttling
      new cloudwatch.Alarm(this, 'DynamoDbThrottling', {
        metric: table.metricThrottledRequests(),
        threshold: 1,
        evaluationPeriods: 1
      }),
      
      // High latency
      new cloudwatch.Alarm(this, 'HighLatency', {
        metric: api.metricLatency(),
        threshold: 5000, // 5 seconds
        evaluationPeriods: 3
      })
    ];
    
    // SNS topic for alerts
    const alertTopic = new sns.Topic(this, 'ProductionAlerts');
    
    // Email subscription
    alertTopic.addSubscription(
      new snsSubscriptions.EmailSubscription('alerts@aerotage.com')
    );
    
    // Add alarms to SNS topic
    criticalAlarms.forEach(alarm => {
      alarm.addAlarmAction(new cloudwatchActions.SnsAction(alertTopic));
    });
  }
}
```

### **Custom Metrics for Business KPIs**
```typescript
// Business metrics tracking
const businessMetrics = {
  // User activity
  activeUsers: new cloudwatch.Metric({
    namespace: 'Aerotage/Business',
    metricName: 'ActiveUsers',
    dimensionsMap: {
      Environment: 'production'
    }
  }),
  
  // API usage
  apiCalls: new cloudwatch.Metric({
    namespace: 'Aerotage/API',
    metricName: 'TotalCalls',
    statistic: 'Sum'
  }),
  
  // Authentication success rate
  authSuccessRate: new cloudwatch.Metric({
    namespace: 'Aerotage/Auth',
    metricName: 'SuccessRate',
    statistic: 'Average'
  }),
  
  // Session duration
  sessionDuration: new cloudwatch.Metric({
    namespace: 'Aerotage/Sessions',
    metricName: 'AverageDuration',
    statistic: 'Average'
  })
};
```

## 🚀 Production Deployment Process

### **Pre-Deployment Checklist**
```bash
# 1. Code Quality Verification
npm run lint                    # ESLint validation
npm run test                    # Unit tests
npm run test:integration        # Integration tests
npm run build                   # TypeScript compilation

# 2. Security Scan
npm audit                       # Dependency vulnerabilities
npm run security:scan           # Custom security checks

# 3. Performance Testing
npm run test:load               # Load testing
npm run test:performance        # Performance benchmarks

# 4. Documentation Update
npm run docs:generate           # Update API documentation
npm run docs:validate           # Validate documentation

# 5. Environment Preparation
aws configure list              # Verify AWS credentials
cdk diff --profile production   # Review changes
```

### **Deployment Commands**
```bash
# Production deployment process
# 1. Deploy infrastructure
cd infrastructure
npm run deploy:prod

# 2. Verify deployment
npm run verify:prod

# 3. Run smoke tests
npm run test:smoke:prod

# 4. Update documentation
npm run docs:deploy:prod

# 5. Notify team
npm run notify:deployment:prod
```

### **Post-Deployment Verification**
```typescript
// Automated verification script
const verifyProduction = async () => {
  const checks = [
    // API health check
    async () => {
      const response = await fetch('https://api.aerotage.com/health');
      return response.status === 200;
    },
    
    // Authentication check
    async () => {
      // Test login flow
      const auth = await testAuthentication();
      return auth.success;
    },
    
    // Database connectivity
    async () => {
      const db = await testDatabaseConnection();
      return db.connected;
    },
    
    // Email service
    async () => {
      const email = await testEmailService();
      return email.delivered;
    },
    
    // Monitoring
    async () => {
      const metrics = await checkCloudWatchMetrics();
      return metrics.healthy;
    }
  ];
  
  const results = await Promise.all(checks.map(check => check()));
  const allPassed = results.every(result => result === true);
  
  if (allPassed) {
    console.log('✅ Production deployment verified successfully');
  } else {
    console.error('❌ Production verification failed');
    // Trigger rollback if needed
  }
  
  return allPassed;
};
```

## 🔄 Production Maintenance

### **Backup Strategy**
```typescript
// Automated backup configuration
const backupPlan = new backup.BackupPlan(this, 'ProductionBackup', {
  backupPlanRules: [
    {
      ruleName: 'DailyBackups',
      scheduleExpression: events.Schedule.cron({
        hour: '2',
        minute: '0'
      }),
      deleteAfter: Duration.days(30)
    },
    {
      ruleName: 'WeeklyBackups',
      scheduleExpression: events.Schedule.cron({
        weekDay: '1',
        hour: '3',
        minute: '0'
      }),
      deleteAfter: Duration.days(90)
    }
  ]
});

// Add DynamoDB tables to backup
dynamoTables.forEach(table => {
  backupPlan.addSelection('TableBackup', {
    resources: [backup.BackupResource.fromDynamoDbTable(table)]
  });
});
```

### **Disaster Recovery Plan**
```typescript
// Multi-region disaster recovery
const drRegion = 'us-west-2';

// Cross-region replication for critical data
const globalTable = new dynamodb.Table(this, 'GlobalTable', {
  replicationRegions: [drRegion],
  // ... other configuration
});

// Lambda function for failover
const failoverFunction = new lambda.Function(this, 'FailoverFunction', {
  // Handles traffic routing in case of primary region failure
  // Updates Route 53 health checks
  // Notifies operations team
});
```

### **Performance Monitoring**
```typescript
// Production performance targets
const performanceTargets = {
  apiResponseTime: {
    p50: 200,  // 50th percentile < 200ms
    p95: 500,  // 95th percentile < 500ms
    p99: 1000  // 99th percentile < 1000ms
  },
  
  availability: 99.9,  // 99.9% uptime
  errorRate: 0.1,      // < 0.1% error rate
  
  throughput: {
    requestsPerSecond: 100,
    concurrentUsers: 500
  }
};

// Automated performance alerts
const performanceAlarms = Object.entries(performanceTargets).map(
  ([metric, target]) => new cloudwatch.Alarm(this, `${metric}Alarm`, {
    // Configure based on targets
  })
);
```

## 📋 Production Success Criteria

### **Technical Requirements**
- ✅ **Uptime**: 99.9% availability SLA
- ✅ **Performance**: <200ms average response time
- ✅ **Security**: Zero security vulnerabilities
- ✅ **Scalability**: Handle 500 concurrent users
- ✅ **Monitoring**: Real-time alerting and dashboards
- ✅ **Backup**: Automated daily backups with 30-day retention

### **Business Requirements**
- ✅ **User Experience**: Seamless authentication and session management
- ✅ **Data Integrity**: Zero data loss with point-in-time recovery
- ✅ **Compliance**: Meet security and privacy requirements
- ✅ **Support**: 24/7 monitoring with incident response
- ✅ **Documentation**: Complete operational runbooks

### **Operational Requirements**
- ✅ **Deployment**: Automated CI/CD pipeline
- ✅ **Rollback**: Ability to rollback within 15 minutes
- ✅ **Monitoring**: Comprehensive observability
- ✅ **Alerting**: Proactive issue detection
- ✅ **Documentation**: Updated operational procedures

Remember: Production deployment requires **careful planning**, **thorough testing**, and **comprehensive monitoring**. Never rush production deployments and always have a **rollback plan** ready.

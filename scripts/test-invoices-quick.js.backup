#!/usr/bin/env node

const https = require('https');
const { URL } = require('url');

// Configuration - Update these values for your environment
const CONFIG = {
  API_BASE_URL: 'https://time-api-dev.aerotage.com',
  COGNITO_CLIENT_ID: '148r35u6uultp1rmfdu22i8amb',
  TEST_USER: {
    email: 'bhardwick@aerotage.com',
    password: 'Aerotage*2025'
  }
};

// Utility function for HTTP requests
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    const req = https.request(requestOptions, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          resolve({
            statusCode: res.statusCode,
            body: data ? JSON.parse(data) : null
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            body: data
          });
        }
      });
    });

    req.on('error', reject);
    if (options.body) {
      req.write(JSON.stringify(options.body));
    }
    req.end();
  });
}

async function authenticate() {
  console.log('üîê Authenticating...');
  
  const response = await makeRequest('https://cognito-idp.us-east-1.amazonaws.com/', {
    method: 'POST',
    headers: {
      'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
      'Content-Type': 'application/x-amz-json-1.1'
    },
    body: {
      AuthFlow: 'USER_PASSWORD_AUTH',
      ClientId: CONFIG.COGNITO_CLIENT_ID,
      AuthParameters: {
        USERNAME: CONFIG.TEST_USER.email,
        PASSWORD: CONFIG.TEST_USER.password
      }
    }
  });

  if (response.statusCode !== 200) {
    throw new Error(`Authentication failed: ${response.statusCode}`);
  }

  console.log('‚úÖ Authentication successful');
  return response.body.AuthenticationResult.IdToken;
}

async function quickTest() {
  console.log('üöÄ Quick Invoice API Test');
  console.log('=========================\n');

  try {
    // Step 1: Authenticate
    const token = await authenticate();

    // Step 2: List existing invoices
    console.log('üìã Listing invoices...');
    const listResponse = await makeRequest(`${CONFIG.API_BASE_URL}/invoices?limit=5`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    console.log(`Status: ${listResponse.statusCode}`);
    if (listResponse.statusCode === 200 && listResponse.body.success) {
      console.log(`‚úÖ Found ${listResponse.body.data.items.length} invoices`);
      
      // Show first invoice if any exist
      if (listResponse.body.data.items.length > 0) {
        const firstInvoice = listResponse.body.data.items[0];
        console.log(`   Latest: ${firstInvoice.invoiceNumber} - $${firstInvoice.totalAmount} (${firstInvoice.status})`);
      }
    } else {
      console.log('‚ùå Failed to list invoices');
      console.log('Response:', JSON.stringify(listResponse.body, null, 2));
    }

    // Step 3: Generate a test invoice
    console.log('\nüìù Generating test invoice...');
    const invoiceData = {
      clientId: 'test-client-123',
      additionalLineItems: [
        {
          type: 'fixed',
          description: 'Quick Test Service',
          quantity: 1,
          rate: 150.00,
          amount: 150.00,
          taxable: true
        }
      ],
      issueDate: new Date().toISOString().split('T')[0],
      paymentTerms: 'Net 30',
      currency: 'USD',
      taxRate: 0.08,
      notes: 'Generated by quick test script'
    };

    const createResponse = await makeRequest(`${CONFIG.API_BASE_URL}/invoices`, {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${token}` },
      body: invoiceData
    });

    console.log(`Status: ${createResponse.statusCode}`);
    if (createResponse.statusCode === 201 && createResponse.body.success) {
      const invoice = createResponse.body.data;
      console.log(`‚úÖ Invoice created: ${invoice.invoiceNumber}`);
      console.log(`   Amount: $${invoice.totalAmount}`);
      console.log(`   Status: ${invoice.status}`);
      console.log(`   Due Date: ${invoice.dueDate}`);

      // Step 4: Update invoice status
      console.log('\nüîÑ Updating invoice status...');
      const statusResponse = await makeRequest(`${CONFIG.API_BASE_URL}/invoices/${invoice.id}/status`, {
        method: 'PUT',
        headers: { 'Authorization': `Bearer ${token}` },
        body: { status: 'sent' }
      });

      console.log(`Status: ${statusResponse.statusCode}`);
      if (statusResponse.statusCode === 200 && statusResponse.body.success) {
        console.log(`‚úÖ Status updated to: ${statusResponse.body.data.invoice.status}`);
      } else {
        console.log('‚ùå Failed to update status');
      }

      // Step 5: Record a payment
      console.log('\nüí≥ Recording payment...');
      const paymentResponse = await makeRequest(`${CONFIG.API_BASE_URL}/invoices/${invoice.id}/status`, {
        method: 'PUT',
        headers: { 'Authorization': `Bearer ${token}` },
        body: {
          operation: 'recordPayment',
          amount: invoice.totalAmount,
          paymentDate: new Date().toISOString().split('T')[0],
          paymentMethod: 'Test Payment',
          reference: 'QUICK-TEST-001'
        }
      });

      console.log(`Status: ${paymentResponse.statusCode}`);
      if (paymentResponse.statusCode === 200 && paymentResponse.body.success) {
        const payment = paymentResponse.body.data.payment;
        const updatedInvoice = paymentResponse.body.data.invoice;
        console.log(`‚úÖ Payment recorded: $${payment.amount}`);
        console.log(`   Invoice status: ${updatedInvoice.status}`);
        console.log(`   Payment method: ${payment.paymentMethod}`);
      } else {
        console.log('‚ùå Failed to record payment');
        console.log('Response:', JSON.stringify(paymentResponse.body, null, 2));
      }

    } else {
      console.log('‚ùå Failed to create invoice');
      console.log('Response:', JSON.stringify(createResponse.body, null, 2));
    }

    console.log('\nüéâ Quick test completed!');
    console.log('\nFor comprehensive testing, run: node test-invoices.js');

  } catch (error) {
    console.error('üí• Test failed:', error.message);
    process.exit(1);
  }
}

// Run the quick test
if (require.main === module) {
  quickTest();
}

module.exports = { quickTest, CONFIG }; 
#!/bin/bash

# Get API Endpoints for Frontend Configuration
# Usage: ./scripts/get-api-endpoints.sh [environment]
# Example: ./scripts/get-api-endpoints.sh dev

ENVIRONMENT=${1:-dev}

echo "üöÄ Aerotage Time Reporting API - Current Endpoints"
echo "=================================================="
echo ""

# Check if the API stack exists
API_STACK_NAME="AerotageAPI-${ENVIRONMENT}"
if ! aws cloudformation describe-stacks --stack-name "$API_STACK_NAME" &>/dev/null; then
    echo "‚ùå Stack '$API_STACK_NAME' not found!"
    echo "Available environments:"
    aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output text | grep "AerotageAPI-" | awk '{print $5}' | sed 's/AerotageAPI-/  - /'
    exit 1
fi

echo "üìç Environment: $ENVIRONMENT"
echo "üì¶ API Stack: $API_STACK_NAME"

# Check for custom domain stack
DOMAIN_STACK_NAME="AerotageDomain-${ENVIRONMENT}"
CUSTOM_DOMAIN_URL=""

if aws cloudformation describe-stacks --stack-name "$DOMAIN_STACK_NAME" &>/dev/null; then
    echo "üì¶ Domain Stack: $DOMAIN_STACK_NAME"
    CUSTOM_DOMAIN_URL=$(aws cloudformation describe-stacks --stack-name "$DOMAIN_STACK_NAME" --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text 2>/dev/null)
fi

# Get API Gateway URL as fallback
API_GATEWAY_URL=$(aws cloudformation describe-stacks --stack-name "$API_STACK_NAME" --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" --output text 2>/dev/null)

# Determine which URL to use
if [ -n "$CUSTOM_DOMAIN_URL" ] && [ "$CUSTOM_DOMAIN_URL" != "None" ]; then
    API_URL="$CUSTOM_DOMAIN_URL"
    echo "‚úÖ Using Custom Domain: $API_URL"
    echo "üìã Raw API Gateway URL: $API_GATEWAY_URL"
elif [ -n "$API_GATEWAY_URL" ] && [ "$API_GATEWAY_URL" != "None" ]; then
    API_URL="$API_GATEWAY_URL"
    echo "‚ö†Ô∏è  Using Raw API Gateway URL: $API_URL"
    echo "üí° Consider setting up custom domain for production use"
else
    echo "‚ùå Could not retrieve API URL from stack outputs"
    exit 1
fi

echo ""

# Test the API
echo "üîç Testing API connectivity..."
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${API_URL}/health" 2>/dev/null)

if [ "$HTTP_STATUS" = "200" ]; then
    echo "‚úÖ API is responding correctly (200 OK - health endpoint working)"
elif [ "$HTTP_STATUS" = "401" ]; then
    echo "‚úÖ API is responding correctly (401 Unauthorized - expected for some endpoints)"
elif [ "$HTTP_STATUS" = "000" ]; then
    echo "‚ùå API is not reachable (DNS resolution or network error)"
else
    echo "‚ö†Ô∏è  API responded with status: $HTTP_STATUS"
fi

echo ""
echo "üìã Frontend Configuration:"
echo "=========================="
echo ""
echo "Update your frontend API configuration with:"
echo ""
echo "const API_BASE_URL = '$API_URL';"
echo ""
echo "or for environment files:"
echo ""
echo "REACT_APP_API_BASE_URL=$API_URL"
echo "# or"
echo "VITE_API_BASE_URL=$API_URL"
echo ""

echo "üîó Key Endpoints:"
echo "=================="
echo ""
echo "‚Ä¢ Health Check:         GET    ${API_URL}/health"
echo "‚Ä¢ List Users:           GET    ${API_URL}/users"
echo "‚Ä¢ User Profile:         GET    ${API_URL}/users/{id}/profile"
echo "‚Ä¢ User Preferences:     GET    ${API_URL}/users/{id}/preferences"
echo "‚Ä¢ User Sessions:        GET    ${API_URL}/users/{id}/sessions"
echo "‚Ä¢ Projects:             GET    ${API_URL}/projects"
echo "‚Ä¢ Clients:              GET    ${API_URL}/clients"
echo "‚Ä¢ Time Entries:         GET    ${API_URL}/time-entries"
echo "‚Ä¢ Reports:              POST   ${API_URL}/reports/time"
echo "‚Ä¢ Analytics:            POST   ${API_URL}/analytics/dashboard/enhanced"
echo "‚Ä¢ Invoices:             GET    ${API_URL}/invoices"
echo "‚Ä¢ User Invitations:     GET    ${API_URL}/user-invitations"
echo ""

echo "üìù Notes:"
echo "========="
echo "‚Ä¢ Most endpoints require Cognito JWT authentication"
echo "‚Ä¢ Use Authorization: Bearer {token} header for authenticated endpoints"
echo "‚Ä¢ Health endpoint (/health) is public and doesn't require authentication"
echo "‚Ä¢ API returns 401 Unauthorized for missing/invalid tokens"
echo ""

echo "üß™ Testing:"
echo "==========="
echo "‚Ä¢ Run comprehensive tests: node scripts/test-all-endpoints.js"
echo "‚Ä¢ Test OpenAPI coverage:   node scripts/test-openapi-coverage.js"
echo "‚Ä¢ Build documentation:     node scripts/build-openapi.js $ENVIRONMENT $API_URL"
echo ""

echo "üêõ Troubleshooting:"
echo "==================="
echo "‚Ä¢ If getting DNS errors, verify the URL is correct"
echo "‚Ä¢ If getting 403 Forbidden, check Cognito token validity"
echo "‚Ä¢ If getting 401 Unauthorized, ensure Authorization header is set"
echo "‚Ä¢ For CORS issues, ensure proper headers are included"
echo "‚Ä¢ Check CloudWatch logs for detailed error information" 
{
  "openapi": "3.0.3",
  "info": {
    "title": "Aerotage Time Reporting API",
    "description": "Comprehensive time tracking and project management API for Aerotage.\n\n## Authentication\nThis API uses AWS Cognito for authentication. All endpoints (except public invitation endpoints) require JWT authentication.\n\n### Authentication Flow\n1. **Sign Up/Login**: Use AWS Cognito SDK to authenticate users\n2. **Get JWT Token**: Extract the JWT token from Cognito session\n3. **API Requests**: Include JWT token in Authorization header: `Bearer {token}`\n4. **Session Management**: Create backend session records for tracking\n\n### Cognito Configuration\n- **User Pool ID**: `us-east-1_EsdlgX9Qg`\n- **App Client ID**: `148r35u6uultp1rmfdu22i8amb`\n- **Identity Pool ID**: `us-east-1:d79776bb-4b8e-4654-a10a-a45b1adaa787`\n- **Region**: `us-east-1`\n\n### Authentication Endpoints\nWhile authentication is handled by AWS Cognito, this API provides session management endpoints:\n- `POST /users/{id}/sessions` - Create session record after Cognito login\n- `GET /users/{id}/sessions` - List active sessions\n- `DELETE /users/{id}/sessions/{sessionId}` - Terminate session (deletes from database)\n- `POST /logout` - Complete logout with session cleanup\n- `PUT /users/{id}/password` - Change password (requires current password)\n\n## Base URL\n- Development: `https://k60bobrd9h.execute-api.us-east-1.amazonaws.com/dev/`\n- Production: `https://api.aerotage.com/`\n\n\n**Environment:** DEV\n**Last Updated:** May 27, 2025 at 03:22:21 PM",
    "version": "1.0.0-dev-2025-05-27T19-22-21",
    "contact": {
      "name": "Aerotage Support",
      "email": "support@aerotage.com"
    },
    "license": {
      "name": "Proprietary"
    }
  },
  "servers": [
    {
      "url": "https://k60bobrd9h.execute-api.us-east-1.amazonaws.com/dev/",
      "description": "Development server"
    }
  ],
  "security": [
    {
      "CognitoAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "CognitoAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "AWS Cognito JWT token"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "manager",
              "employee"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "pending"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "hourlyRate": {
            "type": "number",
            "format": "float"
          },
          "timezone": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string",
            "format": "uri"
          },
          "bio": {
            "type": "string"
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserPreferences": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "enum": [
              "light",
              "dark"
            ]
          },
          "language": {
            "type": "string",
            "default": "en"
          },
          "dateFormat": {
            "type": "string",
            "enum": [
              "MM/DD/YYYY",
              "DD/MM/YYYY",
              "YYYY-MM-DD"
            ]
          },
          "timeFormat": {
            "type": "string",
            "enum": [
              "12h",
              "24h"
            ]
          },
          "timezone": {
            "type": "string"
          },
          "notifications": {
            "$ref": "#/components/schemas/NotificationSettings"
          },
          "dashboard": {
            "$ref": "#/components/schemas/DashboardSettings"
          }
        }
      },
      "NotificationSettings": {
        "type": "object",
        "properties": {
          "email": {
            "type": "boolean"
          },
          "desktop": {
            "type": "boolean"
          },
          "mobile": {
            "type": "boolean"
          },
          "weeklyReports": {
            "type": "boolean"
          },
          "projectUpdates": {
            "type": "boolean"
          },
          "teamMessages": {
            "type": "boolean"
          }
        }
      },
      "DashboardSettings": {
        "type": "object",
        "properties": {
          "defaultView": {
            "type": "string",
            "enum": [
              "dashboard",
              "timesheet",
              "projects"
            ]
          },
          "showWeekends": {
            "type": "boolean"
          },
          "autoStartTimer": {
            "type": "boolean"
          },
          "reminderInterval": {
            "type": "integer",
            "description": "Reminder interval in minutes"
          }
        }
      },
      "SecuritySettings": {
        "type": "object",
        "properties": {
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "sessionTimeout": {
            "type": "integer",
            "description": "Session timeout in minutes"
          },
          "allowMultipleSessions": {
            "type": "boolean"
          },
          "passwordChangeRequired": {
            "type": "boolean"
          },
          "passwordLastChanged": {
            "type": "string",
            "format": "date-time"
          },
          "passwordExpiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "securitySettings": {
            "type": "object",
            "properties": {
              "requirePasswordChangeEvery": {
                "type": "integer",
                "description": "Days between required password changes"
              },
              "maxFailedLoginAttempts": {
                "type": "integer"
              },
              "accountLockoutDuration": {
                "type": "integer",
                "description": "Account lockout duration in minutes"
              }
            }
          }
        }
      },
      "UserSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          },
          "loginTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastActivity": {
            "type": "string",
            "format": "date-time"
          },
          "isCurrent": {
            "type": "boolean"
          },
          "location": {
            "type": "object",
            "properties": {
              "city": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            }
          }
        }
      },
      "UserInvitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "manager",
              "employee"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "expired",
              "cancelled"
            ]
          },
          "invitationToken": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "invitedBy": {
            "type": "string",
            "format": "email"
          },
          "department": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string"
          },
          "hourlyRate": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "completed",
              "on_hold",
              "cancelled"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "budget": {
            "type": "number",
            "format": "float"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Client": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "contactPerson": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the client is active (soft delete flag)",
            "default": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TimeEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique time entry identifier"
          },
          "userId": {
            "type": "string",
            "description": "User who created this entry"
          },
          "projectId": {
            "type": "string",
            "description": "Associated project ID"
          },
          "taskId": {
            "type": "string",
            "description": "Optional task ID within the project"
          },
          "description": {
            "type": "string",
            "description": "Description of work performed"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of work (YYYY-MM-DD)"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "Start time (for timer entries)"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "End time (for timer entries)"
          },
          "duration": {
            "type": "integer",
            "description": "Duration in minutes"
          },
          "isBillable": {
            "type": "boolean",
            "description": "Whether this time is billable"
          },
          "hourlyRate": {
            "type": "number",
            "format": "float",
            "description": "Hourly rate for this entry"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "submitted",
              "approved",
              "rejected"
            ],
            "description": "Current status of the time entry"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for categorizing the entry"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "File attachment URLs"
          },
          "approvedBy": {
            "type": "string",
            "description": "User ID who approved this entry"
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the entry was approved"
          },
          "rejectedBy": {
            "type": "string",
            "description": "User ID who rejected this entry"
          },
          "rejectedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the entry was rejected"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Reason for rejection"
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the entry was submitted for approval"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the entry was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the entry was last updated"
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique invoice identifier"
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Human-readable invoice number (e.g., INV-2025-001)"
          },
          "clientId": {
            "type": "string",
            "description": "Associated client ID"
          },
          "clientName": {
            "type": "string",
            "description": "Client name for display"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated project IDs"
          },
          "timeEntryIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Time entries included in this invoice"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "sent",
              "viewed",
              "paid",
              "overdue",
              "cancelled",
              "refunded"
            ],
            "description": "Current invoice status"
          },
          "issueDate": {
            "type": "string",
            "format": "date",
            "description": "Date the invoice was issued"
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "description": "Payment due date"
          },
          "paidDate": {
            "type": "string",
            "format": "date",
            "description": "Date the invoice was paid (if applicable)"
          },
          "subtotal": {
            "type": "number",
            "format": "float",
            "description": "Subtotal before tax and discounts"
          },
          "taxRate": {
            "type": "number",
            "format": "float",
            "description": "Tax rate applied (e.g., 0.08 for 8%)"
          },
          "taxAmount": {
            "type": "number",
            "format": "float",
            "description": "Calculated tax amount"
          },
          "discountRate": {
            "type": "number",
            "format": "float",
            "description": "Discount rate applied (e.g., 0.05 for 5%)"
          },
          "discountAmount": {
            "type": "number",
            "format": "float",
            "description": "Calculated discount amount"
          },
          "totalAmount": {
            "type": "number",
            "format": "float",
            "description": "Final total amount"
          },
          "currency": {
            "type": "string",
            "default": "USD",
            "description": "Currency code (ISO 4217)"
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItem"
            },
            "description": "Invoice line items"
          },
          "paymentTerms": {
            "type": "string",
            "description": "Payment terms (e.g., \"Net 30\")"
          },
          "isRecurring": {
            "type": "boolean",
            "default": false,
            "description": "Whether this is a recurring invoice"
          },
          "recurringConfig": {
            "$ref": "#/components/schemas/RecurringInvoiceConfig",
            "description": "Recurring invoice configuration (if applicable)"
          },
          "remindersSent": {
            "type": "integer",
            "default": 0,
            "description": "Number of payment reminders sent"
          },
          "notes": {
            "type": "string",
            "description": "Internal notes"
          },
          "clientNotes": {
            "type": "string",
            "description": "Notes visible to the client"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the invoice was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the invoice was last updated"
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created the invoice"
          }
        }
      },
      "InvoiceLineItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique line item identifier"
          },
          "type": {
            "type": "string",
            "enum": [
              "time",
              "fixed",
              "expense"
            ],
            "description": "Type of line item"
          },
          "description": {
            "type": "string",
            "description": "Line item description"
          },
          "quantity": {
            "type": "number",
            "format": "float",
            "description": "Quantity (hours for time entries)"
          },
          "rate": {
            "type": "number",
            "format": "float",
            "description": "Rate per unit"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Total amount for this line item"
          },
          "taxable": {
            "type": "boolean",
            "default": true,
            "description": "Whether this item is taxable"
          },
          "timeEntryId": {
            "type": "string",
            "description": "Associated time entry ID (for time-based items)"
          },
          "projectId": {
            "type": "string",
            "description": "Associated project ID"
          }
        }
      },
      "RecurringInvoiceConfig": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "string",
            "enum": [
              "weekly",
              "monthly",
              "quarterly",
              "yearly"
            ],
            "description": "Recurrence frequency"
          },
          "interval": {
            "type": "integer",
            "default": 1,
            "description": "Interval between recurrences"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Start date for recurring invoices"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "End date for recurring invoices (optional)"
          },
          "isActive": {
            "type": "boolean",
            "default": true,
            "description": "Whether recurring is active"
          },
          "autoSend": {
            "type": "boolean",
            "default": false,
            "description": "Automatically send generated invoices"
          },
          "generateDaysBefore": {
            "type": "integer",
            "default": 0,
            "description": "Days before due date to generate invoice"
          },
          "invoicesGenerated": {
            "type": "integer",
            "default": 0,
            "description": "Number of invoices generated so far"
          },
          "nextInvoiceDate": {
            "type": "string",
            "format": "date",
            "description": "Next scheduled invoice date"
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique payment identifier"
          },
          "invoiceId": {
            "type": "string",
            "description": "Associated invoice ID"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Payment amount"
          },
          "currency": {
            "type": "string",
            "default": "USD",
            "description": "Payment currency"
          },
          "paymentDate": {
            "type": "string",
            "format": "date",
            "description": "Date payment was made"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method (e.g., \"Credit Card\", \"Bank Transfer\")"
          },
          "reference": {
            "type": "string",
            "description": "Payment reference number"
          },
          "notes": {
            "type": "string",
            "description": "Payment notes"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "completed",
              "failed",
              "refunded"
            ],
            "description": "Payment status"
          },
          "externalPaymentId": {
            "type": "string",
            "description": "External payment processor ID"
          },
          "processorFee": {
            "type": "number",
            "format": "float",
            "description": "Payment processor fee"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the payment was recorded"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the payment was last updated"
          },
          "recordedBy": {
            "type": "string",
            "description": "User ID who recorded the payment"
          }
        }
      },
      "InvoiceTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique template identifier"
          },
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "isDefault": {
            "type": "boolean",
            "default": false,
            "description": "Whether this is the default template"
          },
          "layout": {
            "type": "string",
            "enum": [
              "standard",
              "modern",
              "minimal",
              "detailed"
            ],
            "description": "Template layout style"
          },
          "colors": {
            "type": "object",
            "properties": {
              "primary": {
                "type": "string",
                "description": "Primary color (hex)"
              },
              "secondary": {
                "type": "string",
                "description": "Secondary color (hex)"
              },
              "accent": {
                "type": "string",
                "description": "Accent color (hex)"
              }
            }
          },
          "logo": {
            "type": "string",
            "description": "Company logo URL"
          },
          "companyInfo": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "website": {
                "type": "string"
              }
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "position": {
                  "type": "string",
                  "enum": [
                    "header",
                    "footer",
                    "lineItems"
                  ]
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserWorkSchedule": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "monday": {
                "$ref": "#/components/schemas/WorkDaySchedule"
              },
              "tuesday": {
                "$ref": "#/components/schemas/WorkDaySchedule"
              },
              "wednesday": {
                "$ref": "#/components/schemas/WorkDaySchedule"
              },
              "thursday": {
                "$ref": "#/components/schemas/WorkDaySchedule"
              },
              "friday": {
                "$ref": "#/components/schemas/WorkDaySchedule"
              },
              "saturday": {
                "$ref": "#/components/schemas/WorkDaySchedule"
              },
              "sunday": {
                "$ref": "#/components/schemas/WorkDaySchedule"
              }
            }
          },
          "timezone": {
            "type": "string",
            "description": "User's timezone",
            "example": "America/New_York"
          },
          "weeklyTargetHours": {
            "type": "number",
            "format": "float",
            "description": "Total target hours per week",
            "example": 40
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WorkDaySchedule": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "nullable": true,
            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
            "description": "Start time in HH:MM format (null for non-working days)",
            "example": "09:00"
          },
          "end": {
            "type": "string",
            "nullable": true,
            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
            "description": "End time in HH:MM format (null for non-working days)",
            "example": "17:00"
          },
          "targetHours": {
            "type": "number",
            "format": "float",
            "description": "Target hours for this day",
            "example": 8
          }
        }
      },
      "DailySummaryResponse": {
        "type": "object",
        "properties": {
          "summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailySummary"
            }
          },
          "periodSummary": {
            "$ref": "#/components/schemas/PeriodSummary"
          }
        }
      },
      "DailySummary": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date in YYYY-MM-DD format",
            "example": "2024-01-15"
          },
          "dayOfWeek": {
            "type": "string",
            "description": "Day of the week",
            "example": "Monday"
          },
          "totalMinutes": {
            "type": "integer",
            "description": "Total minutes worked",
            "example": 480
          },
          "totalHours": {
            "type": "number",
            "format": "float",
            "description": "Total hours worked",
            "example": 8
          },
          "billableMinutes": {
            "type": "integer",
            "description": "Billable minutes",
            "example": 420
          },
          "billableHours": {
            "type": "number",
            "format": "float",
            "description": "Billable hours",
            "example": 7
          },
          "nonBillableMinutes": {
            "type": "integer",
            "description": "Non-billable minutes",
            "example": 60
          },
          "nonBillableHours": {
            "type": "number",
            "format": "float",
            "description": "Non-billable hours",
            "example": 1
          },
          "targetMinutes": {
            "type": "integer",
            "description": "Target minutes for the day",
            "example": 480
          },
          "targetHours": {
            "type": "number",
            "format": "float",
            "description": "Target hours for the day",
            "example": 8
          },
          "completionPercentage": {
            "type": "number",
            "format": "float",
            "description": "Completion percentage vs target",
            "example": 100
          },
          "entriesCount": {
            "type": "integer",
            "description": "Number of time entries",
            "example": 5
          },
          "projectBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTimeBreakdown"
            }
          },
          "timeGaps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeGap"
            }
          },
          "workingHours": {
            "$ref": "#/components/schemas/WorkingHours"
          }
        }
      },
      "ProjectTimeBreakdown": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID"
          },
          "projectName": {
            "type": "string",
            "description": "Project name"
          },
          "clientName": {
            "type": "string",
            "description": "Client name"
          },
          "minutes": {
            "type": "integer",
            "description": "Minutes spent on project"
          },
          "hours": {
            "type": "number",
            "format": "float",
            "description": "Hours spent on project"
          },
          "percentage": {
            "type": "number",
            "format": "float",
            "description": "Percentage of total time"
          }
        }
      },
      "TimeGap": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "Gap start time (HH:MM)",
            "example": "10:00"
          },
          "endTime": {
            "type": "string",
            "description": "Gap end time (HH:MM)",
            "example": "10:30"
          },
          "durationMinutes": {
            "type": "integer",
            "description": "Gap duration in minutes",
            "example": 30
          },
          "suggestedAction": {
            "type": "string",
            "description": "Suggested action for the gap",
            "example": "break"
          }
        }
      },
      "WorkingHours": {
        "type": "object",
        "properties": {
          "firstEntry": {
            "type": "string",
            "nullable": true,
            "description": "Time of first entry (HH:MM)",
            "example": "08:00"
          },
          "lastEntry": {
            "type": "string",
            "nullable": true,
            "description": "Time of last entry (HH:MM)",
            "example": "17:30"
          },
          "totalSpan": {
            "type": "string",
            "nullable": true,
            "description": "Total working span",
            "example": "9h 30m"
          }
        }
      },
      "PeriodSummary": {
        "type": "object",
        "properties": {
          "totalDays": {
            "type": "integer",
            "description": "Total days in period"
          },
          "workDays": {
            "type": "integer",
            "description": "Work days in period"
          },
          "totalHours": {
            "type": "number",
            "format": "float",
            "description": "Total hours worked"
          },
          "averageHoursPerDay": {
            "type": "number",
            "format": "float",
            "description": "Average hours per day"
          },
          "targetHours": {
            "type": "number",
            "format": "float",
            "description": "Target hours for period"
          },
          "completionPercentage": {
            "type": "number",
            "format": "float",
            "description": "Completion percentage vs target"
          }
        }
      },
      "WeeklyOverview": {
        "type": "object",
        "properties": {
          "weekInfo": {
            "$ref": "#/components/schemas/WeekInfo"
          },
          "dailySummaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailySummary"
            }
          },
          "weeklyTotals": {
            "$ref": "#/components/schemas/WeeklyTotals"
          },
          "patterns": {
            "$ref": "#/components/schemas/WeeklyPatterns"
          },
          "projectDistribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeeklyProjectBreakdown"
            }
          },
          "comparison": {
            "$ref": "#/components/schemas/WeeklyComparison"
          }
        }
      },
      "WeekInfo": {
        "type": "object",
        "properties": {
          "weekStartDate": {
            "type": "string",
            "format": "date",
            "description": "Monday of the week"
          },
          "weekEndDate": {
            "type": "string",
            "format": "date",
            "description": "Friday of the week"
          },
          "weekNumber": {
            "type": "integer",
            "description": "Week number of the year"
          },
          "year": {
            "type": "integer",
            "description": "Year"
          }
        }
      },
      "WeeklyTotals": {
        "type": "object",
        "properties": {
          "totalHours": {
            "type": "number",
            "format": "float",
            "description": "Total hours for the week"
          },
          "billableHours": {
            "type": "number",
            "format": "float",
            "description": "Billable hours for the week"
          },
          "nonBillableHours": {
            "type": "number",
            "format": "float",
            "description": "Non-billable hours for the week"
          },
          "targetHours": {
            "type": "number",
            "format": "float",
            "description": "Target hours for the week"
          },
          "completionPercentage": {
            "type": "number",
            "format": "float",
            "description": "Completion percentage vs target"
          },
          "totalEntries": {
            "type": "integer",
            "description": "Total number of time entries"
          }
        }
      },
      "WeeklyPatterns": {
        "type": "object",
        "properties": {
          "mostProductiveDay": {
            "type": "string",
            "description": "Day with most hours worked"
          },
          "leastProductiveDay": {
            "type": "string",
            "description": "Day with least hours worked"
          },
          "averageStartTime": {
            "type": "string",
            "description": "Average start time"
          },
          "averageEndTime": {
            "type": "string",
            "description": "Average end time"
          },
          "longestWorkDay": {
            "type": "string",
            "description": "Day with longest work hours"
          },
          "shortestWorkDay": {
            "type": "string",
            "description": "Day with shortest work hours"
          }
        }
      },
      "WeeklyProjectBreakdown": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Project ID"
          },
          "projectName": {
            "type": "string",
            "description": "Project name"
          },
          "clientName": {
            "type": "string",
            "description": "Client name"
          },
          "totalHours": {
            "type": "number",
            "format": "float",
            "description": "Total hours on project"
          },
          "percentage": {
            "type": "number",
            "format": "float",
            "description": "Percentage of total week time"
          },
          "dailyBreakdown": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date"
                },
                "hours": {
                  "type": "number",
                  "format": "float"
                }
              }
            }
          }
        }
      },
      "WeeklyComparison": {
        "type": "object",
        "properties": {
          "previousWeek": {
            "type": "object",
            "properties": {
              "totalHours": {
                "type": "number",
                "format": "float"
              },
              "change": {
                "type": "string",
                "description": "Change from previous week"
              },
              "changePercentage": {
                "type": "string",
                "description": "Percentage change"
              }
            }
          }
        }
      },
      "TimeReport": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string",
            "description": "Unique report identifier"
          },
          "reportType": {
            "type": "string",
            "example": "time"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "filters": {
            "type": "object",
            "description": "Applied filters"
          },
          "summary": {
            "type": "object",
            "properties": {
              "totalHours": {
                "type": "number",
                "format": "float"
              },
              "totalRevenue": {
                "type": "number",
                "format": "float"
              },
              "billableHours": {
                "type": "number",
                "format": "float"
              },
              "nonBillableHours": {
                "type": "number",
                "format": "float"
              },
              "projectCount": {
                "type": "integer"
              },
              "userCount": {
                "type": "integer"
              },
              "clientCount": {
                "type": "integer"
              },
              "averageHourlyRate": {
                "type": "number",
                "format": "float"
              },
              "utilizationRate": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Time entry data grouped by specified criteria"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "hasMore": {
                "type": "boolean"
              },
              "totalCount": {
                "type": "integer"
              }
            }
          },
          "cacheInfo": {
            "type": "object",
            "properties": {
              "cached": {
                "type": "boolean"
              },
              "cacheKey": {
                "type": "string"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "ProjectReport": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string"
          },
          "reportType": {
            "type": "string",
            "example": "project"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "summary": {
            "type": "object",
            "properties": {
              "totalProjects": {
                "type": "integer"
              },
              "activeProjects": {
                "type": "integer"
              },
              "completedProjects": {
                "type": "integer"
              },
              "totalBudget": {
                "type": "number",
                "format": "float"
              },
              "totalSpent": {
                "type": "number",
                "format": "float"
              },
              "averageCompletion": {
                "type": "number",
                "format": "float"
              },
              "onTimeDelivery": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Project performance data"
            }
          }
        }
      },
      "ClientReport": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string"
          },
          "reportType": {
            "type": "string",
            "example": "client"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "summary": {
            "type": "object",
            "properties": {
              "totalClients": {
                "type": "integer"
              },
              "activeClients": {
                "type": "integer"
              },
              "totalRevenue": {
                "type": "number",
                "format": "float"
              },
              "averageProjectValue": {
                "type": "number",
                "format": "float"
              },
              "clientRetentionRate": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Client performance and billing data"
            }
          }
        }
      },
      "ScheduleConfig": {
        "type": "object",
        "required": [
          "frequency",
          "time",
          "timezone"
        ],
        "properties": {
          "frequency": {
            "type": "string",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "quarterly",
              "custom"
            ],
            "description": "Schedule frequency"
          },
          "time": {
            "type": "string",
            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
            "example": "09:00",
            "description": "Time in HH:MM format"
          },
          "timezone": {
            "type": "string",
            "example": "America/New_York",
            "description": "Timezone for the schedule"
          },
          "dayOfWeek": {
            "type": "integer",
            "minimum": 0,
            "maximum": 6,
            "description": "Day of week for weekly schedules (0 = Sunday)"
          },
          "dayOfMonth": {
            "type": "integer",
            "minimum": 1,
            "maximum": 31,
            "description": "Day of month for monthly schedules"
          },
          "customCron": {
            "type": "string",
            "description": "Custom cron expression for custom frequency"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Schedule start date"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "Schedule end date"
          }
        }
      },
      "DeliveryConfig": {
        "type": "object",
        "required": [
          "recipients",
          "format"
        ],
        "properties": {
          "recipients": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            },
            "description": "Email recipients"
          },
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "message": {
            "type": "string",
            "description": "Email message"
          },
          "format": {
            "type": "string",
            "enum": [
              "pdf",
              "csv",
              "excel"
            ],
            "description": "Report format"
          },
          "includeAttachment": {
            "type": "boolean",
            "default": true,
            "description": "Include report as attachment"
          },
          "includeDownloadLink": {
            "type": "boolean",
            "default": true,
            "description": "Include download link"
          }
        }
      },
      "ScheduledReport": {
        "type": "object",
        "properties": {
          "scheduleId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "reportConfigId": {
            "type": "string"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleConfig"
          },
          "delivery": {
            "$ref": "#/components/schemas/DeliveryConfig"
          },
          "enabled": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastRun": {
            "type": "string",
            "format": "date-time"
          },
          "nextRun": {
            "type": "string",
            "format": "date-time"
          },
          "runCount": {
            "type": "integer"
          },
          "failureCount": {
            "type": "integer"
          },
          "lastError": {
            "type": "string"
          },
          "eventBridgeRuleName": {
            "type": "string"
          }
        }
      },
      "ScheduleResponse": {
        "type": "object",
        "properties": {
          "scheduleId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "updated",
              "deleted"
            ]
          },
          "nextRun": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "DashboardWidget": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "kpi",
              "chart",
              "gauge",
              "table",
              "metric"
            ]
          },
          "title": {
            "type": "string"
          },
          "size": {
            "type": "string",
            "enum": [
              "small",
              "medium",
              "large",
              "full"
            ]
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "integer"
              },
              "y": {
                "type": "integer"
              }
            }
          },
          "config": {
            "type": "object",
            "description": "Widget-specific configuration"
          }
        }
      },
      "EnhancedDashboard": {
        "type": "object",
        "properties": {
          "dashboardId": {
            "type": "string"
          },
          "widgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardWidget"
            }
          },
          "summary": {
            "type": "object",
            "properties": {
              "totalRevenue": {
                "type": "number",
                "format": "float"
              },
              "totalHours": {
                "type": "number",
                "format": "float"
              },
              "activeProjects": {
                "type": "integer"
              },
              "teamUtilization": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "refreshInterval": {
            "type": "integer"
          },
          "forecasting": {
            "type": "object",
            "description": "Forecasting data"
          },
          "benchmarks": {
            "type": "object",
            "description": "Benchmark comparisons"
          }
        }
      },
      "RealTimeAnalytics": {
        "type": "object",
        "properties": {
          "metrics": {
            "type": "object",
            "properties": {
              "activeUsers": {
                "type": "integer"
              },
              "currentSessions": {
                "type": "integer"
              },
              "todayHours": {
                "type": "number",
                "format": "float"
              },
              "todayRevenue": {
                "type": "number",
                "format": "float"
              },
              "liveTimers": {
                "type": "integer"
              }
            }
          },
          "activities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "action": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "sessions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "lastActivity": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "alerts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high",
                    "critical"
                  ]
                }
              }
            }
          },
          "nextRefresh": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PerformanceMonitoring": {
        "type": "object",
        "properties": {
          "timeframe": {
            "type": "string"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "system": {
            "type": "object",
            "description": "System performance metrics"
          },
          "api": {
            "type": "object",
            "description": "API performance metrics"
          },
          "database": {
            "type": "object",
            "description": "Database performance metrics"
          },
          "userExperience": {
            "type": "object",
            "description": "User experience metrics"
          },
          "recommendations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "alerts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "severity": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "comparisons": {
            "type": "object",
            "description": "Performance comparisons"
          },
          "summary": {
            "type": "object",
            "properties": {
              "overallScore": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100
              },
              "performanceGrade": {
                "type": "string",
                "enum": [
                  "A",
                  "B",
                  "C",
                  "D",
                  "F"
                ]
              },
              "keyMetrics": {
                "type": "object",
                "properties": {
                  "responseTime": {
                    "type": "integer",
                    "description": "Average response time in milliseconds"
                  },
                  "throughput": {
                    "type": "integer",
                    "description": "Requests per minute"
                  },
                  "errorRate": {
                    "type": "number",
                    "format": "float",
                    "description": "Error rate percentage"
                  },
                  "availability": {
                    "type": "number",
                    "format": "float",
                    "description": "Availability percentage"
                  }
                }
              }
            }
          }
        }
      },
      "FilterCondition": {
        "type": "object",
        "required": [
          "field",
          "operator",
          "value"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "Field to filter on"
          },
          "operator": {
            "type": "string",
            "enum": [
              "equals",
              "not_equals",
              "greater_than",
              "less_than",
              "greater_equal",
              "less_equal",
              "contains",
              "starts_with",
              "ends_with",
              "in",
              "not_in",
              "between",
              "date_range"
            ],
            "description": "Filter operator"
          },
          "value": {
            "description": "Filter value (type varies by field and operator)"
          },
          "secondValue": {
            "description": "Second value for range operators"
          },
          "logicalOperator": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ],
            "default": "AND",
            "description": "Logical operator to combine with next condition"
          }
        }
      },
      "Aggregation": {
        "type": "object",
        "required": [
          "field",
          "function"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "Field to aggregate"
          },
          "function": {
            "type": "string",
            "enum": [
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "count_distinct"
            ],
            "description": "Aggregation function"
          },
          "alias": {
            "type": "string",
            "description": "Alias for the aggregated field"
          }
        }
      },
      "FilterResult": {
        "type": "object",
        "properties": {
          "filterId": {
            "type": "string"
          },
          "dataSource": {
            "type": "string"
          },
          "appliedFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterCondition"
            }
          },
          "resultCount": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "groupedData": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "aggregations": {
            "type": "object",
            "description": "Aggregation results"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "hasMore": {
                "type": "boolean"
              },
              "totalCount": {
                "type": "integer"
              }
            }
          },
          "executionTime": {
            "type": "integer",
            "description": "Query execution time in milliseconds"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object"
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List all users",
        "description": "Retrieve a list of all users (admin/manager only)",
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create new user",
        "description": "Create a new user account (admin only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "name",
                  "role"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "name": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "admin",
                      "manager",
                      "employee"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "User ID"
        }
      ],
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get user by ID",
        "description": "Retrieve user information by ID",
        "responses": {
          "200": {
            "description": "User information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Update user",
        "description": "Update user information",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "admin",
                      "manager",
                      "employee"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Delete user",
        "description": "Delete user account (admin only)",
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User deleted successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/profile": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "User ID"
        }
      ],
      "get": {
        "tags": [
          "User Profile"
        ],
        "summary": "Get user profile",
        "description": "Retrieve detailed user profile information",
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserProfile"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Profile"
        ],
        "summary": "Update user profile",
        "description": "Update user profile information",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "jobTitle": {
                    "type": "string"
                  },
                  "department": {
                    "type": "string"
                  },
                  "hourlyRate": {
                    "type": "number",
                    "format": "float"
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "bio": {
                    "type": "string"
                  },
                  "skills": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserProfile"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/preferences": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "User ID"
        }
      ],
      "get": {
        "tags": [
          "User Preferences"
        ],
        "summary": "Get user preferences",
        "description": "Retrieve user preferences and settings",
        "responses": {
          "200": {
            "description": "User preferences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserPreferences"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Preferences"
        ],
        "summary": "Update user preferences",
        "description": "Update user preferences and settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferences"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preferences updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserPreferences"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/password": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "User ID"
        }
      ],
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Change password",
        "description": "Change user password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currentPassword",
                  "newPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 8,
                    "description": "Must contain uppercase, lowercase, number, and special character"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Password updated successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/security-settings": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "User ID"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Get security settings",
        "description": "Retrieve user security settings",
        "responses": {
          "200": {
            "description": "Security settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/SecuritySettings"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Update security settings",
        "description": "Update user security settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionTimeout": {
                    "type": "integer"
                  },
                  "allowMultipleSessions": {
                    "type": "boolean"
                  },
                  "requirePasswordChangeEvery": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security settings updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/SecuritySettings"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/sessions": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "User ID"
        }
      ],
      "get": {
        "tags": [
          "Session Management"
        ],
        "summary": "List user sessions",
        "description": "Retrieve list of active user sessions",
        "responses": {
          "200": {
            "description": "List of sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserSession"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Session Management"
        ],
        "summary": "Create session",
        "description": "Create a new user session record",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userAgent",
                  "loginTime"
                ],
                "properties": {
                  "userAgent": {
                    "type": "string"
                  },
                  "loginTime": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserSession"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/sessions/{sessionId}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "User ID"
        },
        {
          "name": "sessionId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Session ID"
        }
      ],
      "delete": {
        "tags": [
          "Session Management"
        ],
        "summary": "Terminate session",
        "description": "Terminate a specific user session by deleting it from the database.\n\n**Important**: This endpoint now actually deletes the session record from the database,\nrather than just marking it as inactive. The session will be permanently removed.\n\n**Restrictions**: \n- Users can only terminate their own sessions\n- Cannot terminate the current session (use logout endpoint instead)\n",
        "responses": {
          "200": {
            "description": "Session terminated and deleted from database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Session terminated successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot terminate current session or session already inactive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "Session Management"
        ],
        "summary": "User logout",
        "description": "Perform a complete logout operation with session cleanup.\n\n**Features**:\n- Finds and deletes the current session based on user agent and IP\n- Cleans up any expired sessions for the user\n- Returns the ID of the session that was deleted\n\n**Usage**: This should be called before signing out from Cognito to ensure\nproper backend session cleanup.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "example": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful with session cleanup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Logout successful"
                        },
                        "sessionId": {
                          "type": "string",
                          "description": "ID of the session that was deleted (if any)",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user-invitations": {
      "get": {
        "tags": [
          "User Invitations"
        ],
        "summary": "List invitations",
        "description": "List user invitations with optional filtering",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "accepted",
                "expired",
                "cancelled"
              ]
            },
            "description": "Filter by invitation status"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            },
            "description": "Number of results to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Pagination offset"
          }
        ],
        "responses": {
          "200": {
            "description": "List of invitations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserInvitation"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Invitations"
        ],
        "summary": "Create invitation",
        "description": "Create a new user invitation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "role"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "admin",
                      "manager",
                      "employee"
                    ]
                  },
                  "department": {
                    "type": "string"
                  },
                  "jobTitle": {
                    "type": "string"
                  },
                  "hourlyRate": {
                    "type": "number",
                    "format": "float"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "features": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "projects": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "personalMessage": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invitation created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserInvitation"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-invitations/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Invitation ID"
        }
      ],
      "delete": {
        "tags": [
          "User Invitations"
        ],
        "summary": "Cancel invitation",
        "description": "Cancel a pending invitation",
        "responses": {
          "200": {
            "description": "Invitation cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invitation cancelled successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-invitations/{id}/resend": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Invitation ID"
        }
      ],
      "post": {
        "tags": [
          "User Invitations"
        ],
        "summary": "Resend invitation",
        "description": "Resend an invitation email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "extendExpiration": {
                    "type": "boolean",
                    "default": true
                  },
                  "personalMessage": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation resent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserInvitation"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-invitations/validate/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Invitation token"
        }
      ],
      "get": {
        "tags": [
          "User Invitations"
        ],
        "summary": "Validate invitation token",
        "description": "Validate an invitation token (public endpoint)",
        "security": [],
        "responses": {
          "200": {
            "description": "Token validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "valid": {
                          "type": "boolean"
                        },
                        "invitation": {
                          "$ref": "#/components/schemas/UserInvitation"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-invitations/accept": {
      "post": {
        "tags": [
          "User Invitations"
        ],
        "summary": "Accept invitation",
        "description": "Accept an invitation and create user account (public endpoint)",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "userData"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "userData": {
                    "type": "object",
                    "required": [
                      "name",
                      "password"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string",
                        "minLength": 8
                      },
                      "preferences": {
                        "$ref": "#/components/schemas/UserPreferences"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invitation accepted and user created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "message": {
                          "type": "string",
                          "example": "Account created successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Project Management"
        ],
        "summary": "List projects",
        "description": "Retrieve a list of projects with optional filtering and pagination",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by client ID"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "completed",
                "on_hold",
                "cancelled"
              ]
            },
            "description": "Filter by project status"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            },
            "description": "Number of results to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Pagination offset"
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "projects": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Project"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "hasMore": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project Management"
        ],
        "summary": "Create project",
        "description": "Create a new project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "clientId"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Project name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Project description"
                  },
                  "clientId": {
                    "type": "string",
                    "description": "Client ID for this project"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "completed",
                      "on_hold",
                      "cancelled"
                    ],
                    "default": "active",
                    "description": "Project status"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Project start date (YYYY-MM-DD)"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Project end date (YYYY-MM-DD)"
                  },
                  "budget": {
                    "type": "number",
                    "format": "float",
                    "description": "Project budget"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Project ID"
        }
      ],
      "put": {
        "tags": [
          "Project Management"
        ],
        "summary": "Update project",
        "description": "Update an existing project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "clientId": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "completed",
                      "on_hold",
                      "cancelled"
                    ]
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "budget": {
                    "type": "number",
                    "format": "float"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project Management"
        ],
        "summary": "Delete project",
        "description": "Delete a project (only if no time entries exist)",
        "responses": {
          "200": {
            "description": "Project deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Project deleted successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete project with existing time entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/clients": {
      "get": {
        "tags": [
          "Client Management"
        ],
        "summary": "List clients",
        "description": "Retrieve a list of clients with optional filtering and pagination",
        "parameters": [
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by active status"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            },
            "description": "Number of results to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Pagination offset"
          }
        ],
        "responses": {
          "200": {
            "description": "List of clients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "clients": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Client"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "hasMore": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client Management"
        ],
        "summary": "Create client",
        "description": "Create a new client",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Client name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Client email address"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Client phone number"
                  },
                  "address": {
                    "type": "string",
                    "description": "Client address"
                  },
                  "contactPerson": {
                    "type": "string",
                    "description": "Primary contact person"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Client"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Client ID"
        }
      ],
      "put": {
        "tags": [
          "Client Management"
        ],
        "summary": "Update client",
        "description": "Update an existing client",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "contactPerson": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Client"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client Management"
        ],
        "summary": "Delete client",
        "description": "Soft delete a client (sets isActive to false). Cannot delete clients with active projects.",
        "responses": {
          "200": {
            "description": "Client deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Client deleted successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete client with active projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/time-entries": {
      "get": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "List time entries",
        "description": "Retrieve time entries with optional filtering and pagination",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by user ID (managers/admins can view all users)"
          },
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by project ID"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "submitted",
                "approved",
                "rejected"
              ]
            },
            "description": "Filter by entry status"
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter entries from this date (YYYY-MM-DD)"
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter entries to this date (YYYY-MM-DD)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            },
            "description": "Number of results to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Pagination offset"
          }
        ],
        "responses": {
          "200": {
            "description": "List of time entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "entries": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TimeEntry"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "hasMore": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Create time entry",
        "description": "Create a new time entry",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "projectId",
                  "description",
                  "date",
                  "duration"
                ],
                "properties": {
                  "projectId": {
                    "type": "string",
                    "description": "Project ID for this time entry"
                  },
                  "taskId": {
                    "type": "string",
                    "description": "Optional task ID within the project"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of work performed"
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of work (YYYY-MM-DD)"
                  },
                  "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start time (for timer entries)"
                  },
                  "endTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End time (for timer entries)"
                  },
                  "duration": {
                    "type": "integer",
                    "description": "Duration in minutes"
                  },
                  "isBillable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether this time is billable"
                  },
                  "hourlyRate": {
                    "type": "number",
                    "format": "float",
                    "description": "Override hourly rate for this entry"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags for categorizing the entry"
                  },
                  "attachments": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "File attachment URLs"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Time entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/TimeEntry"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/time-entries/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Time entry ID"
        }
      ],
      "put": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Update time entry",
        "description": "Update an existing time entry (only draft entries can be updated)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "taskId": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  },
                  "startTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "duration": {
                    "type": "integer"
                  },
                  "isBillable": {
                    "type": "boolean"
                  },
                  "hourlyRate": {
                    "type": "number",
                    "format": "float"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "attachments": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/TimeEntry"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Cannot update submitted/approved entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Delete time entry",
        "description": "Delete a time entry (only draft entries can be deleted)",
        "responses": {
          "200": {
            "description": "Time entry deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Time entry deleted successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Cannot delete submitted/approved entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Time entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/time-entries/submit": {
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Submit time entries for approval",
        "description": "Submit multiple time entries for manager approval",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "entryIds"
                ],
                "properties": {
                  "entryIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of time entry IDs to submit"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional comment for the submission"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time entries submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "submitted": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Successfully submitted entry IDs"
                        },
                        "failed": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "entryId": {
                                "type": "string"
                              },
                              "error": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Failed submissions with reasons"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/time-entries/approve": {
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Approve time entries",
        "description": "Approve submitted time entries (managers/admins only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "entryIds"
                ],
                "properties": {
                  "entryIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of time entry IDs to approve"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional approval comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time entries approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "approved": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Successfully approved entry IDs"
                        },
                        "failed": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "entryId": {
                                "type": "string"
                              },
                              "error": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Failed approvals with reasons"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/time-entries/reject": {
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Reject time entries",
        "description": "Reject submitted time entries (managers/admins only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "entryIds",
                  "reason"
                ],
                "properties": {
                  "entryIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of time entry IDs to reject"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for rejection (required)"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Additional comments"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time entries rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "rejected": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Successfully rejected entry IDs"
                        },
                        "failed": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "entryId": {
                                "type": "string"
                              },
                              "error": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Failed rejections with reasons"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/work-schedule": {
      "get": {
        "tags": [
          "Daily/Weekly Time Tracking"
        ],
        "summary": "Get user work schedule",
        "description": "Retrieve the user's work schedule configuration",
        "responses": {
          "200": {
            "description": "User work schedule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserWorkSchedule"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Daily/Weekly Time Tracking"
        ],
        "summary": "Update user work schedule",
        "description": "Update the user's work schedule configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "schedule",
                  "timezone"
                ],
                "properties": {
                  "schedule": {
                    "type": "object",
                    "properties": {
                      "monday": {
                        "$ref": "#/components/schemas/WorkDaySchedule"
                      },
                      "tuesday": {
                        "$ref": "#/components/schemas/WorkDaySchedule"
                      },
                      "wednesday": {
                        "$ref": "#/components/schemas/WorkDaySchedule"
                      },
                      "thursday": {
                        "$ref": "#/components/schemas/WorkDaySchedule"
                      },
                      "friday": {
                        "$ref": "#/components/schemas/WorkDaySchedule"
                      },
                      "saturday": {
                        "$ref": "#/components/schemas/WorkDaySchedule"
                      },
                      "sunday": {
                        "$ref": "#/components/schemas/WorkDaySchedule"
                      }
                    }
                  },
                  "timezone": {
                    "type": "string",
                    "description": "User's timezone (e.g., America/New_York)",
                    "example": "America/New_York"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Work schedule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserWorkSchedule"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid work schedule data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/time-entries/daily-summary": {
      "get": {
        "tags": [
          "Daily/Weekly Time Tracking"
        ],
        "summary": "Get daily time summary",
        "description": "Get aggregated time data for specific days with gap analysis",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for summary (YYYY-MM-DD)",
            "example": "2024-01-15"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for summary (YYYY-MM-DD)",
            "example": "2024-01-15"
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "User ID (optional, defaults to current user)"
          },
          {
            "name": "includeGaps",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Include time gap analysis"
          },
          {
            "name": "targetHours",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float",
              "default": 8
            },
            "description": "Target hours per day for completion percentage"
          }
        ],
        "responses": {
          "200": {
            "description": "Daily summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/DailySummaryResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid date range or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/time-entries/weekly-overview": {
      "get": {
        "tags": [
          "Daily/Weekly Time Tracking"
        ],
        "summary": "Get weekly time overview",
        "description": "Get comprehensive weekly time analysis with patterns and trends",
        "parameters": [
          {
            "name": "weekStartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Monday of the week to analyze (YYYY-MM-DD)",
            "example": "2024-01-15"
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "User ID (optional, defaults to current user)"
          },
          {
            "name": "includeComparison",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include comparison with previous week"
          }
        ],
        "responses": {
          "200": {
            "description": "Weekly overview retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/WeeklyOverview"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid week start date",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/time-entries/quick-add": {
      "post": {
        "tags": [
          "Daily/Weekly Time Tracking"
        ],
        "summary": "Quick add time entry",
        "description": "Simplified time entry creation for filling gaps",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date",
                  "startTime",
                  "endTime",
                  "projectId",
                  "description"
                ],
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of work (YYYY-MM-DD)",
                    "example": "2024-01-15"
                  },
                  "startTime": {
                    "type": "string",
                    "description": "Start time in HH:MM format",
                    "example": "09:00"
                  },
                  "endTime": {
                    "type": "string",
                    "description": "End time in HH:MM format",
                    "example": "10:30"
                  },
                  "projectId": {
                    "type": "string",
                    "description": "Project ID for this time entry"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of work performed",
                    "example": "Code review and bug fixes"
                  },
                  "isBillable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether this time is billable"
                  },
                  "fillGap": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether this entry is filling a detected gap"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Time entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/TimeEntry"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid time entry data or time overlap detected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reports/time": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Generate time report",
        "description": "Generate comprehensive time tracking reports with filtering and grouping options",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Report start date (YYYY-MM-DD)"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Report end date (YYYY-MM-DD)"
                  },
                  "groupBy": {
                    "type": "string",
                    "enum": [
                      "date",
                      "week",
                      "month",
                      "project",
                      "user",
                      "client"
                    ],
                    "default": "date",
                    "description": "How to group the report data"
                  },
                  "includeDetails": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include detailed time entries"
                  },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "userId": {
                        "type": "string",
                        "description": "Filter by specific user"
                      },
                      "projectId": {
                        "type": "string",
                        "description": "Filter by specific project"
                      },
                      "clientId": {
                        "type": "string",
                        "description": "Filter by specific client"
                      },
                      "billable": {
                        "type": "boolean",
                        "description": "Filter by billable status"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "draft",
                          "submitted",
                          "approved",
                          "rejected"
                        ],
                        "description": "Filter by entry status"
                      }
                    }
                  },
                  "sortBy": {
                    "type": "string",
                    "enum": [
                      "date",
                      "hours",
                      "revenue",
                      "project",
                      "user"
                    ],
                    "default": "date",
                    "description": "Sort field"
                  },
                  "sortOrder": {
                    "type": "string",
                    "enum": [
                      "asc",
                      "desc"
                    ],
                    "default": "desc",
                    "description": "Sort order"
                  },
                  "limit": {
                    "type": "integer",
                    "default": 100,
                    "maximum": 1000,
                    "description": "Maximum number of results"
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "description": "Pagination offset"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/TimeReport"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reports/projects": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Generate project report",
        "description": "Generate comprehensive project performance and analytics reports",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "includeFinancials": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include financial metrics"
                  },
                  "includeTeamMetrics": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include team performance metrics"
                  },
                  "groupBy": {
                    "type": "string",
                    "enum": [
                      "project",
                      "client",
                      "status",
                      "month"
                    ],
                    "default": "project"
                  },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string"
                      },
                      "clientId": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "active",
                          "completed",
                          "on_hold",
                          "cancelled"
                        ]
                      },
                      "managerId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProjectReport"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reports/clients": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Generate client report",
        "description": "Generate client performance, billing, and activity reports",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "includeBilling": {
                    "type": "boolean",
                    "default": true
                  },
                  "includeActivity": {
                    "type": "boolean",
                    "default": true
                  },
                  "includeInvoices": {
                    "type": "boolean",
                    "default": true
                  },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "clientId": {
                        "type": "string"
                      },
                      "isActive": {
                        "type": "boolean"
                      },
                      "minRevenue": {
                        "type": "number",
                        "format": "float"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientReport"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reports/export": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Export report",
        "description": "Export reports in various formats (PDF, CSV, Excel)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reportData",
                  "format"
                ],
                "properties": {
                  "reportData": {
                    "type": "object",
                    "description": "Report data to export"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "pdf",
                      "csv",
                      "excel"
                    ],
                    "description": "Export format"
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "includeCharts": {
                        "type": "boolean",
                        "default": true
                      },
                      "includeRawData": {
                        "type": "boolean",
                        "default": true
                      },
                      "orientation": {
                        "type": "string",
                        "enum": [
                          "portrait",
                          "landscape"
                        ],
                        "default": "portrait"
                      },
                      "pageSize": {
                        "type": "string",
                        "enum": [
                          "A4",
                          "Letter",
                          "Legal"
                        ],
                        "default": "A4"
                      }
                    }
                  },
                  "delivery": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "email"
                        },
                        "description": "Email addresses to send the report"
                      },
                      "subject": {
                        "type": "string",
                        "description": "Email subject"
                      },
                      "message": {
                        "type": "string",
                        "description": "Email message"
                      },
                      "downloadLink": {
                        "type": "boolean",
                        "default": true,
                        "description": "Include download link"
                      },
                      "expiresIn": {
                        "type": "integer",
                        "default": 24,
                        "description": "Download link expiration in hours"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Report export initiated (placeholder implementation)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Placeholder endpoint - implementation pending"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reports/schedule": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Schedule report",
        "description": "Create automated report scheduling with EventBridge",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reportConfigId",
                  "schedule",
                  "delivery"
                ],
                "properties": {
                  "reportConfigId": {
                    "type": "string",
                    "description": "Report configuration ID"
                  },
                  "schedule": {
                    "$ref": "#/components/schemas/ScheduleConfig"
                  },
                  "delivery": {
                    "$ref": "#/components/schemas/DeliveryConfig"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether the schedule is enabled"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Report schedule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ScheduleResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid schedule configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "List scheduled reports",
        "description": "Get list of scheduled reports for the current user",
        "parameters": [
          {
            "name": "enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by enabled status"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            },
            "description": "Number of results to return"
          }
        ],
        "responses": {
          "200": {
            "description": "List of scheduled reports",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "schedules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ScheduledReport"
                          }
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reports/schedule/{scheduleId}": {
      "parameters": [
        {
          "name": "scheduleId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Schedule ID"
        }
      ],
      "get": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Get scheduled report",
        "description": "Get details of a specific scheduled report",
        "responses": {
          "200": {
            "description": "Scheduled report details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ScheduledReport"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Schedule not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Update scheduled report",
        "description": "Update an existing report schedule",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schedule": {
                    "$ref": "#/components/schemas/ScheduleConfig"
                  },
                  "delivery": {
                    "$ref": "#/components/schemas/DeliveryConfig"
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ScheduleResponse"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Delete scheduled report",
        "description": "Delete a report schedule and associated EventBridge rule",
        "responses": {
          "200": {
            "description": "Schedule deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ScheduleResponse"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/dashboard/enhanced": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Generate enhanced dashboard",
        "description": "Generate customizable dashboard with widgets, KPIs, and real-time data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "widgets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DashboardWidget"
                    },
                    "description": "Dashboard widgets configuration"
                  },
                  "timeframe": {
                    "type": "string",
                    "enum": [
                      "day",
                      "week",
                      "month",
                      "quarter",
                      "year"
                    ],
                    "default": "month",
                    "description": "Data timeframe"
                  },
                  "realTime": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable real-time updates"
                  },
                  "includeForecasting": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include forecasting data"
                  },
                  "includeBenchmarks": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include benchmark comparisons"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Enhanced dashboard generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/EnhancedDashboard"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/real-time": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Get real-time analytics",
        "description": "Retrieve real-time system and user analytics",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metrics": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "activeUsers",
                        "currentSessions",
                        "todayHours",
                        "todayRevenue",
                        "liveTimers"
                      ]
                    },
                    "description": "Metrics to include"
                  },
                  "includeActivities": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include recent activities"
                  },
                  "includeSessions": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include session information"
                  },
                  "includeAlerts": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include system alerts"
                  },
                  "refreshInterval": {
                    "type": "integer",
                    "default": 30,
                    "description": "Refresh interval in seconds"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Real-time analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/RealTimeAnalytics"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/performance": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Get performance monitoring",
        "description": "Retrieve system performance metrics and monitoring data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timeframe": {
                    "type": "string",
                    "enum": [
                      "hour",
                      "day",
                      "week",
                      "month"
                    ],
                    "default": "day",
                    "description": "Performance data timeframe"
                  },
                  "metrics": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "system",
                        "api",
                        "database",
                        "user"
                      ]
                    },
                    "description": "Metric categories to include"
                  },
                  "includeRecommendations": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include performance recommendations"
                  },
                  "includeAlerts": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include performance alerts"
                  },
                  "includeComparisons": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include period comparisons"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance monitoring data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/PerformanceMonitoring"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/events": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Track analytics event",
        "description": "Track user actions and system events for analytics",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "user_login",
                      "user_logout",
                      "user_profile_update",
                      "user_preferences_update",
                      "user_action",
                      "timer_start",
                      "timer_stop",
                      "timer_pause",
                      "time_entry_create",
                      "time_entry_update",
                      "time_entry_delete",
                      "time_entry_submit",
                      "time_entry_approve",
                      "time_entry_reject",
                      "project_create",
                      "project_update",
                      "project_delete",
                      "project_view",
                      "client_create",
                      "client_update",
                      "client_delete",
                      "client_view",
                      "report_generate",
                      "report_export",
                      "report_schedule",
                      "dashboard_view",
                      "api_error",
                      "performance_metric",
                      "feature_usage"
                    ],
                    "description": "Type of event to track"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional event metadata"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Event timestamp (defaults to current time)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event tracked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "eventId": {
                          "type": "string",
                          "description": "Unique event identifier"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Event timestamp"
                        },
                        "message": {
                          "type": "string",
                          "example": "Event tracked successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid event type or data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "example": "RATE_LIMIT_EXCEEDED"
                        },
                        "message": {
                          "type": "string",
                          "example": "Too many events. Please try again later."
                        },
                        "retryAfter": {
                          "type": "integer",
                          "example": 60
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/filter": {
      "post": {
        "tags": [
          "Reporting & Analytics"
        ],
        "summary": "Advanced data filtering",
        "description": "Apply complex filters, aggregations, and transformations to data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "dataSource",
                  "filters"
                ],
                "properties": {
                  "dataSource": {
                    "type": "string",
                    "enum": [
                      "time-entries",
                      "projects",
                      "clients",
                      "users",
                      "analytics-events"
                    ],
                    "description": "Data source to filter"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FilterCondition"
                    },
                    "description": "Filter conditions"
                  },
                  "groupBy": {
                    "type": "object",
                    "properties": {
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Fields to group by"
                      },
                      "dateGrouping": {
                        "type": "string",
                        "enum": [
                          "hour",
                          "day",
                          "week",
                          "month",
                          "quarter",
                          "year"
                        ],
                        "description": "Date grouping interval"
                      }
                    }
                  },
                  "aggregations": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Aggregation"
                    },
                    "description": "Aggregation functions"
                  },
                  "sorting": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "type": "string"
                        },
                        "direction": {
                          "type": "string",
                          "enum": [
                            "asc",
                            "desc"
                          ]
                        }
                      }
                    },
                    "description": "Sorting configuration"
                  },
                  "pagination": {
                    "type": "object",
                    "properties": {
                      "limit": {
                        "type": "integer",
                        "default": 50,
                        "maximum": 1000
                      },
                      "offset": {
                        "type": "integer",
                        "default": 0
                      }
                    }
                  },
                  "outputFormat": {
                    "type": "string",
                    "enum": [
                      "summary",
                      "detailed",
                      "raw"
                    ],
                    "default": "detailed",
                    "description": "Output format"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filtered data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/FilterResult"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "List invoices",
        "description": "Retrieve a list of invoices with filtering and pagination",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "sent",
                "viewed",
                "paid",
                "overdue",
                "cancelled",
                "refunded"
              ]
            },
            "description": "Filter by invoice status"
          },
          {
            "name": "clientId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by client ID"
          },
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by project ID"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter invoices from this date"
          },
          {
            "name": "dateTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter invoices to this date"
          },
          {
            "name": "amountMin",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Minimum invoice amount"
          },
          {
            "name": "amountMax",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Maximum invoice amount"
          },
          {
            "name": "isRecurring",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by recurring status"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "invoiceNumber",
                "issueDate",
                "dueDate",
                "totalAmount",
                "status",
                "clientName"
              ],
              "default": "issueDate"
            },
            "description": "Sort field"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 100
            },
            "description": "Number of results to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Number of results to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Invoice"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "hasMore": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Generate invoice",
        "description": "Generate a new invoice from time entries or create a custom invoice",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "clientId"
                ],
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Client ID for the invoice"
                  },
                  "projectIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Project IDs to include"
                  },
                  "timeEntryIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specific time entries to include"
                  },
                  "issueDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Invoice issue date (defaults to today)"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Payment due date (calculated from payment terms if not provided)"
                  },
                  "paymentTerms": {
                    "type": "string",
                    "default": "Net 30",
                    "description": "Payment terms"
                  },
                  "currency": {
                    "type": "string",
                    "default": "USD",
                    "description": "Invoice currency"
                  },
                  "taxRate": {
                    "type": "number",
                    "format": "float",
                    "description": "Tax rate to apply"
                  },
                  "discountRate": {
                    "type": "number",
                    "format": "float",
                    "description": "Discount rate to apply"
                  },
                  "additionalLineItems": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "fixed",
                            "expense"
                          ]
                        },
                        "description": {
                          "type": "string"
                        },
                        "quantity": {
                          "type": "number",
                          "format": "float"
                        },
                        "rate": {
                          "type": "number",
                          "format": "float"
                        },
                        "amount": {
                          "type": "number",
                          "format": "float"
                        },
                        "taxable": {
                          "type": "boolean",
                          "default": true
                        }
                      }
                    },
                    "description": "Additional line items to include"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Internal notes"
                  },
                  "clientNotes": {
                    "type": "string",
                    "description": "Notes visible to client"
                  },
                  "isRecurring": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether this is a recurring invoice"
                  },
                  "recurringConfig": {
                    "$ref": "#/components/schemas/RecurringInvoiceConfig",
                    "description": "Recurring configuration (if isRecurring is true)"
                  },
                  "templateId": {
                    "type": "string",
                    "description": "Invoice template ID to use"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invoice generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Invoice"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invoice generated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}": {
      "parameters": [
        {
          "name": "invoiceId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Invoice ID"
        }
      ],
      "get": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Get invoice details",
        "description": "Retrieve detailed information about a specific invoice",
        "responses": {
          "200": {
            "description": "Invoice details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Invoice"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Update invoice",
        "description": "Update invoice details (only allowed for draft invoices)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dueDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Payment due date"
                  },
                  "paymentTerms": {
                    "type": "string",
                    "description": "Payment terms"
                  },
                  "taxRate": {
                    "type": "number",
                    "format": "float",
                    "description": "Tax rate"
                  },
                  "discountRate": {
                    "type": "number",
                    "format": "float",
                    "description": "Discount rate"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Internal notes"
                  },
                  "clientNotes": {
                    "type": "string",
                    "description": "Client-visible notes"
                  },
                  "lineItems": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/InvoiceLineItem"
                    },
                    "description": "Updated line items"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invoice updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Invoice"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invoice updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data or invoice cannot be updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Delete invoice",
        "description": "Delete an invoice (only allowed for draft invoices)",
        "responses": {
          "200": {
            "description": "Invoice deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Invoice deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invoice cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/send": {
      "parameters": [
        {
          "name": "invoiceId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Invoice ID"
        }
      ],
      "post": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Send invoice",
        "description": "Send invoice to client via email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "recipientEmails"
                ],
                "properties": {
                  "recipientEmails": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    },
                    "description": "Email addresses to send invoice to"
                  },
                  "subject": {
                    "type": "string",
                    "description": "Email subject (optional, will use default)"
                  },
                  "message": {
                    "type": "string",
                    "description": "Custom message to include in email"
                  },
                  "attachPdf": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to attach PDF version"
                  },
                  "sendCopy": {
                    "type": "boolean",
                    "default": false,
                    "description": "Send copy to sender"
                  },
                  "scheduleDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Schedule sending for later (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invoice sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Invoice"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invoice sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid send request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/status": {
      "parameters": [
        {
          "name": "invoiceId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Invoice ID"
        }
      ],
      "put": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Update invoice status or record payment",
        "description": "Update invoice status or record a payment against the invoice",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Status Update",
                    "required": [
                      "status"
                    ],
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "sent",
                          "viewed",
                          "overdue",
                          "cancelled",
                          "refunded"
                        ],
                        "description": "New invoice status"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Payment Recording",
                    "required": [
                      "operation",
                      "amount",
                      "paymentDate",
                      "paymentMethod"
                    ],
                    "properties": {
                      "operation": {
                        "type": "string",
                        "enum": [
                          "recordPayment"
                        ],
                        "description": "Operation type"
                      },
                      "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Payment amount"
                      },
                      "paymentDate": {
                        "type": "string",
                        "format": "date",
                        "description": "Date payment was made"
                      },
                      "paymentMethod": {
                        "type": "string",
                        "description": "Payment method"
                      },
                      "reference": {
                        "type": "string",
                        "description": "Payment reference number"
                      },
                      "notes": {
                        "type": "string",
                        "description": "Payment notes"
                      },
                      "externalPaymentId": {
                        "type": "string",
                        "description": "External payment processor ID"
                      },
                      "processorFee": {
                        "type": "number",
                        "format": "float",
                        "description": "Payment processor fee"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated or payment recorded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "invoice": {
                          "$ref": "#/components/schemas/Invoice"
                        },
                        "payment": {
                          "$ref": "#/components/schemas/Payment",
                          "description": "Payment details (if payment was recorded)"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment recorded successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status update or payment data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/pdf": {
      "parameters": [
        {
          "name": "invoiceId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Invoice ID"
        }
      ],
      "get": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Download invoice PDF",
        "description": "Generate and download invoice as PDF",
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Template ID to use for PDF generation"
          }
        ],
        "responses": {
          "200": {
            "description": "PDF file",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/payments": {
      "parameters": [
        {
          "name": "invoiceId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Invoice ID"
        }
      ],
      "get": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "List invoice payments",
        "description": "Get all payments recorded for an invoice",
        "responses": {
          "200": {
            "description": "List of payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "payments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Payment"
                          }
                        },
                        "totalPaid": {
                          "type": "number",
                          "format": "float",
                          "description": "Total amount paid"
                        },
                        "remainingBalance": {
                          "type": "number",
                          "format": "float",
                          "description": "Remaining balance"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoice-templates": {
      "get": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "List invoice templates",
        "description": "Get all available invoice templates",
        "responses": {
          "200": {
            "description": "List of templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InvoiceTemplate"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Create invoice template",
        "description": "Create a new invoice template",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "layout"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Template name"
                  },
                  "layout": {
                    "type": "string",
                    "enum": [
                      "standard",
                      "modern",
                      "minimal",
                      "detailed"
                    ],
                    "description": "Template layout"
                  },
                  "colors": {
                    "type": "object",
                    "description": "Color scheme"
                  },
                  "logo": {
                    "type": "string",
                    "description": "Company logo URL"
                  },
                  "companyInfo": {
                    "type": "object",
                    "description": "Company information"
                  },
                  "customFields": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "description": "Custom fields"
                  },
                  "isDefault": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set as default template"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/InvoiceTemplate"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoice-templates/{templateId}": {
      "parameters": [
        {
          "name": "templateId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Template ID"
        }
      ],
      "get": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Get invoice template",
        "description": "Get details of a specific invoice template",
        "responses": {
          "200": {
            "description": "Template details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/InvoiceTemplate"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Update invoice template",
        "description": "Update an existing invoice template",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "layout": {
                    "type": "string",
                    "enum": [
                      "standard",
                      "modern",
                      "minimal",
                      "detailed"
                    ]
                  },
                  "colors": {
                    "type": "object"
                  },
                  "logo": {
                    "type": "string"
                  },
                  "companyInfo": {
                    "type": "object"
                  },
                  "customFields": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "isDefault": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/InvoiceTemplate"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Delete invoice template",
        "description": "Delete an invoice template (cannot delete default template)",
        "responses": {
          "200": {
            "description": "Template deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Template deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete default template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/recurring": {
      "get": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "List recurring invoices",
        "description": "Get all recurring invoice configurations",
        "parameters": [
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by active status"
          },
          {
            "name": "frequency",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "weekly",
                "monthly",
                "quarterly",
                "yearly"
              ]
            },
            "description": "Filter by frequency"
          }
        ],
        "responses": {
          "200": {
            "description": "List of recurring invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Process recurring invoices",
        "description": "Manually trigger processing of due recurring invoices",
        "responses": {
          "200": {
            "description": "Recurring invoices processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "processed": {
                          "type": "integer",
                          "description": "Number of invoices generated"
                        },
                        "invoices": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Invoice"
                          },
                          "description": "Generated invoices"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/recurring": {
      "parameters": [
        {
          "name": "invoiceId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Invoice ID"
        }
      ],
      "put": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Update recurring configuration",
        "description": "Update recurring invoice configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringInvoiceConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recurring configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Invoice"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invoice Management"
        ],
        "summary": "Stop recurring invoice",
        "description": "Stop recurring invoice generation",
        "responses": {
          "200": {
            "description": "Recurring invoice stopped",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Recurring invoice stopped"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "User Management",
      "description": "User account management operations"
    },
    {
      "name": "User Profile",
      "description": "User profile information management"
    },
    {
      "name": "User Preferences",
      "description": "User preferences and settings"
    },
    {
      "name": "Security",
      "description": "Security and authentication operations"
    },
    {
      "name": "Session Management",
      "description": "User session management"
    },
    {
      "name": "User Invitations",
      "description": "User invitation system"
    },
    {
      "name": "Project Management",
      "description": "Project lifecycle management"
    },
    {
      "name": "Client Management",
      "description": "Client information management"
    },
    {
      "name": "Time Tracking",
      "description": "Time entry and tracking operations"
    },
    {
      "name": "Reporting & Analytics",
      "description": "Advanced reporting, analytics, and business intelligence"
    },
    {
      "name": "Invoice Management",
      "description": "Invoice generation and management"
    }
  ]
}
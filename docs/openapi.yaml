openapi: 3.0.3
info:
  title: Aerotage Time Reporting API
  description: |
    Comprehensive time tracking and project management API for Aerotage.
    
    ## Authentication
    All endpoints (except public invitation endpoints) require JWT authentication via AWS Cognito.
    Include the JWT token in the Authorization header: `Bearer {token}`
    
    ## Base URL
    - Development: `https://k60bobrd9h.execute-api.us-east-1.amazonaws.com/dev/`
    - Production: `https://api.aerotage.com/`
  version: 1.0.0
  contact:
    name: Aerotage Support
    email: support@aerotage.com
  license:
    name: Proprietary
    
servers:
  - url: https://k60bobrd9h.execute-api.us-east-1.amazonaws.com/dev/
    description: Development server
  - url: https://api.aerotage.com
    description: Production server

security:
  - CognitoAuth: []

components:
  securitySchemes:
    CognitoAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: AWS Cognito JWT token
      
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [admin, manager, employee]
        status:
          type: string
          enum: [active, inactive, pending]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        jobTitle:
          type: string
        department:
          type: string
        hourlyRate:
          type: number
          format: float
        timezone:
          type: string
        profilePicture:
          type: string
          format: uri
        bio:
          type: string
        skills:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark]
        language:
          type: string
          default: en
        dateFormat:
          type: string
          enum: [MM/DD/YYYY, DD/MM/YYYY, YYYY-MM-DD]
        timeFormat:
          type: string
          enum: [12h, 24h]
        timezone:
          type: string
        notifications:
          $ref: '#/components/schemas/NotificationSettings'
        dashboard:
          $ref: '#/components/schemas/DashboardSettings'
          
    NotificationSettings:
      type: object
      properties:
        email:
          type: boolean
        desktop:
          type: boolean
        mobile:
          type: boolean
        weeklyReports:
          type: boolean
        projectUpdates:
          type: boolean
        teamMessages:
          type: boolean
          
    DashboardSettings:
      type: object
      properties:
        defaultView:
          type: string
          enum: [dashboard, timesheet, projects]
        showWeekends:
          type: boolean
        autoStartTimer:
          type: boolean
        reminderInterval:
          type: integer
          description: Reminder interval in minutes
          
    SecuritySettings:
      type: object
      properties:
        twoFactorEnabled:
          type: boolean
        sessionTimeout:
          type: integer
          description: Session timeout in minutes
        allowMultipleSessions:
          type: boolean
        passwordChangeRequired:
          type: boolean
        passwordLastChanged:
          type: string
          format: date-time
        passwordExpiresAt:
          type: string
          format: date-time
        securitySettings:
          type: object
          properties:
            requirePasswordChangeEvery:
              type: integer
              description: Days between required password changes
            maxFailedLoginAttempts:
              type: integer
            accountLockoutDuration:
              type: integer
              description: Account lockout duration in minutes
              
    UserSession:
      type: object
      properties:
        id:
          type: string
        ipAddress:
          type: string
        userAgent:
          type: string
        loginTime:
          type: string
          format: date-time
        lastActivity:
          type: string
          format: date-time
        isCurrent:
          type: boolean
        location:
          type: object
          properties:
            city:
              type: string
            country:
              type: string
              
    UserInvitation:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, manager, employee]
        status:
          type: string
          enum: [pending, accepted, expired, cancelled]
        invitationToken:
          type: string
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        invitedBy:
          type: string
          format: email
        department:
          type: string
        jobTitle:
          type: string
        hourlyRate:
          type: number
          format: float
          

          
    Project:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        clientId:
          type: string
        status:
          type: string
          enum: [active, completed, on_hold, cancelled]
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        budget:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    Client:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        contactPerson:
          type: string
        isActive:
          type: boolean
          description: Whether the client is active (soft delete flag)
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    TimeEntry:
      type: object
      properties:
        id:
          type: string
          description: Unique time entry identifier
        userId:
          type: string
          description: User who created this entry
        projectId:
          type: string
          description: Associated project ID
        taskId:
          type: string
          description: Optional task ID within the project
        description:
          type: string
          description: Description of work performed
        date:
          type: string
          format: date
          description: Date of work (YYYY-MM-DD)
        startTime:
          type: string
          format: date-time
          description: Start time (for timer entries)
        endTime:
          type: string
          format: date-time
          description: End time (for timer entries)
        duration:
          type: integer
          description: Duration in minutes
        isBillable:
          type: boolean
          description: Whether this time is billable
        hourlyRate:
          type: number
          format: float
          description: Hourly rate for this entry
        status:
          type: string
          enum: [draft, submitted, approved, rejected]
          description: Current status of the time entry
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing the entry
        attachments:
          type: array
          items:
            type: string
          description: File attachment URLs
        approvedBy:
          type: string
          description: User ID who approved this entry
        approvedAt:
          type: string
          format: date-time
          description: When the entry was approved
        rejectedBy:
          type: string
          description: User ID who rejected this entry
        rejectedAt:
          type: string
          format: date-time
          description: When the entry was rejected
        rejectionReason:
          type: string
          description: Reason for rejection
        submittedAt:
          type: string
          format: date-time
          description: When the entry was submitted for approval
        createdAt:
          type: string
          format: date-time
          description: When the entry was created
        updatedAt:
          type: string
          format: date-time
          description: When the entry was last updated
          
    Invoice:
      type: object
      properties:
        id:
          type: string
        clientId:
          type: string
        projectId:
          type: string
        invoiceNumber:
          type: string
        status:
          type: string
          enum: [draft, sent, paid, overdue, cancelled]
        amount:
          type: number
          format: float
        dueDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Phase 6 - Reporting & Analytics Schemas
    TimeReport:
      type: object
      properties:
        reportId:
          type: string
          description: Unique report identifier
        reportType:
          type: string
          example: "time"
        generatedAt:
          type: string
          format: date-time
        filters:
          type: object
          description: Applied filters
        summary:
          type: object
          properties:
            totalHours:
              type: number
              format: float
            totalRevenue:
              type: number
              format: float
            billableHours:
              type: number
              format: float
            nonBillableHours:
              type: number
              format: float
            projectCount:
              type: integer
            userCount:
              type: integer
            clientCount:
              type: integer
            averageHourlyRate:
              type: number
              format: float
            utilizationRate:
              type: number
              format: float
        data:
          type: array
          items:
            type: object
            description: Time entry data grouped by specified criteria
        pagination:
          type: object
          properties:
            hasMore:
              type: boolean
            totalCount:
              type: integer
        cacheInfo:
          type: object
          properties:
            cached:
              type: boolean
            cacheKey:
              type: string
            expiresAt:
              type: string
              format: date-time

    ProjectReport:
      type: object
      properties:
        reportId:
          type: string
        reportType:
          type: string
          example: "project"
        generatedAt:
          type: string
          format: date-time
        summary:
          type: object
          properties:
            totalProjects:
              type: integer
            activeProjects:
              type: integer
            completedProjects:
              type: integer
            totalBudget:
              type: number
              format: float
            totalSpent:
              type: number
              format: float
            averageCompletion:
              type: number
              format: float
            onTimeDelivery:
              type: number
              format: float
        data:
          type: array
          items:
            type: object
            description: Project performance data

    ClientReport:
      type: object
      properties:
        reportId:
          type: string
        reportType:
          type: string
          example: "client"
        generatedAt:
          type: string
          format: date-time
        summary:
          type: object
          properties:
            totalClients:
              type: integer
            activeClients:
              type: integer
            totalRevenue:
              type: number
              format: float
            averageProjectValue:
              type: number
              format: float
            clientRetentionRate:
              type: number
              format: float
        data:
          type: array
          items:
            type: object
            description: Client performance and billing data

    ScheduleConfig:
      type: object
      required:
        - frequency
        - time
        - timezone
      properties:
        frequency:
          type: string
          enum: [daily, weekly, monthly, quarterly, custom]
          description: Schedule frequency
        time:
          type: string
          pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "09:00"
          description: Time in HH:MM format
        timezone:
          type: string
          example: "America/New_York"
          description: Timezone for the schedule
        dayOfWeek:
          type: integer
          minimum: 0
          maximum: 6
          description: Day of week for weekly schedules (0 = Sunday)
        dayOfMonth:
          type: integer
          minimum: 1
          maximum: 31
          description: Day of month for monthly schedules
        customCron:
          type: string
          description: Custom cron expression for custom frequency
        startDate:
          type: string
          format: date
          description: Schedule start date
        endDate:
          type: string
          format: date
          description: Schedule end date

    DeliveryConfig:
      type: object
      required:
        - recipients
        - format
      properties:
        recipients:
          type: array
          items:
            type: string
            format: email
          description: Email recipients
        subject:
          type: string
          description: Email subject
        message:
          type: string
          description: Email message
        format:
          type: string
          enum: [pdf, csv, excel]
          description: Report format
        includeAttachment:
          type: boolean
          default: true
          description: Include report as attachment
        includeDownloadLink:
          type: boolean
          default: true
          description: Include download link

    ScheduledReport:
      type: object
      properties:
        scheduleId:
          type: string
        userId:
          type: string
        reportConfigId:
          type: string
        schedule:
          $ref: '#/components/schemas/ScheduleConfig'
        delivery:
          $ref: '#/components/schemas/DeliveryConfig'
        enabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastRun:
          type: string
          format: date-time
        nextRun:
          type: string
          format: date-time
        runCount:
          type: integer
        failureCount:
          type: integer
        lastError:
          type: string
        eventBridgeRuleName:
          type: string

    ScheduleResponse:
      type: object
      properties:
        scheduleId:
          type: string
        status:
          type: string
          enum: [created, updated, deleted]
        nextRun:
          type: string
          format: date-time
        message:
          type: string

    DashboardWidget:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [kpi, chart, gauge, table, metric]
        title:
          type: string
        size:
          type: string
          enum: [small, medium, large, full]
        position:
          type: object
          properties:
            x:
              type: integer
            y:
              type: integer
        config:
          type: object
          description: Widget-specific configuration

    EnhancedDashboard:
      type: object
      properties:
        dashboardId:
          type: string
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/DashboardWidget'
        summary:
          type: object
          properties:
            totalRevenue:
              type: number
              format: float
            totalHours:
              type: number
              format: float
            activeProjects:
              type: integer
            teamUtilization:
              type: number
              format: float
        lastUpdated:
          type: string
          format: date-time
        refreshInterval:
          type: integer
        forecasting:
          type: object
          description: Forecasting data
        benchmarks:
          type: object
          description: Benchmark comparisons

    RealTimeAnalytics:
      type: object
      properties:
        metrics:
          type: object
          properties:
            activeUsers:
              type: integer
            currentSessions:
              type: integer
            todayHours:
              type: number
              format: float
            todayRevenue:
              type: number
              format: float
            liveTimers:
              type: integer
        activities:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              action:
                type: string
              timestamp:
                type: string
                format: date-time
        sessions:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              startTime:
                type: string
                format: date-time
              lastActivity:
                type: string
                format: date-time
        alerts:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              severity:
                type: string
                enum: [low, medium, high, critical]
        nextRefresh:
          type: string
          format: date-time

    PerformanceMonitoring:
      type: object
      properties:
        timeframe:
          type: string
        generatedAt:
          type: string
          format: date-time
        system:
          type: object
          description: System performance metrics
        api:
          type: object
          description: API performance metrics
        database:
          type: object
          description: Database performance metrics
        userExperience:
          type: object
          description: User experience metrics
        recommendations:
          type: array
          items:
            type: string
        alerts:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
              severity:
                type: string
              title:
                type: string
              message:
                type: string
        comparisons:
          type: object
          description: Performance comparisons
        summary:
          type: object
          properties:
            overallScore:
              type: integer
              minimum: 0
              maximum: 100
            performanceGrade:
              type: string
              enum: [A, B, C, D, F]
            keyMetrics:
              type: object
              properties:
                responseTime:
                  type: integer
                  description: Average response time in milliseconds
                throughput:
                  type: integer
                  description: Requests per minute
                errorRate:
                  type: number
                  format: float
                  description: Error rate percentage
                availability:
                  type: number
                  format: float
                  description: Availability percentage

    FilterCondition:
      type: object
      required:
        - field
        - operator
        - value
      properties:
        field:
          type: string
          description: Field to filter on
        operator:
          type: string
          enum: [equals, not_equals, greater_than, less_than, greater_equal, less_equal, contains, starts_with, ends_with, in, not_in, between, date_range]
          description: Filter operator
        value:
          description: Filter value (type varies by field and operator)
        secondValue:
          description: Second value for range operators
        logicalOperator:
          type: string
          enum: [AND, OR]
          default: AND
          description: Logical operator to combine with next condition

    Aggregation:
      type: object
      required:
        - field
        - function
      properties:
        field:
          type: string
          description: Field to aggregate
        function:
          type: string
          enum: [sum, avg, min, max, count, count_distinct]
          description: Aggregation function
        alias:
          type: string
          description: Alias for the aggregated field

    FilterResult:
      type: object
      properties:
        filterId:
          type: string
        dataSource:
          type: string
        appliedFilters:
          type: array
          items:
            $ref: '#/components/schemas/FilterCondition'
        resultCount:
          type: integer
        data:
          type: array
          items:
            type: object
        groupedData:
          type: array
          items:
            type: object
        aggregations:
          type: object
          description: Aggregation results
        pagination:
          type: object
          properties:
            hasMore:
              type: boolean
            totalCount:
              type: integer
        executionTime:
          type: integer
          description: Query execution time in milliseconds
        generatedAt:
          type: string
          format: date-time
          
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
              
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object

paths:
  # User Management
  /users:
    get:
      tags:
        - User Management
      summary: List all users
      description: Retrieve a list of all users (admin/manager only)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      tags:
        - User Management
      summary: Create new user
      description: Create a new user account (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - role
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                role:
                  type: string
                  enum: [admin, manager, employee]
                password:
                  type: string
                  minLength: 8
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: User ID
        
    get:
      tags:
        - User Management
      summary: Get user by ID
      description: Retrieve user information by ID
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    put:
      tags:
        - User Management
      summary: Update user
      description: Update user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                role:
                  type: string
                  enum: [admin, manager, employee]
                status:
                  type: string
                  enum: [active, inactive]
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
                    
    delete:
      tags:
        - User Management
      summary: Delete user
      description: Delete user account (admin only)
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User deleted successfully
                        
  # User Profile
  /users/{id}/profile:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: User ID
        
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Retrieve detailed user profile information
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserProfile'
                    
    put:
      tags:
        - User Profile
      summary: Update user profile
      description: Update user profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                jobTitle:
                  type: string
                department:
                  type: string
                hourlyRate:
                  type: number
                  format: float
                timezone:
                  type: string
                bio:
                  type: string
                skills:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserProfile'
                    
  # User Preferences
  /users/{id}/preferences:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: User ID
        
    get:
      tags:
        - User Preferences
      summary: Get user preferences
      description: Retrieve user preferences and settings
      responses:
        '200':
          description: User preferences
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserPreferences'
                    
    put:
      tags:
        - User Preferences
      summary: Update user preferences
      description: Update user preferences and settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserPreferences'
                    
  # Security & Authentication
  /users/{id}/password:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: User ID
        
    put:
      tags:
        - Security
      summary: Change password
      description: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
                  minLength: 8
                  description: Must contain uppercase, lowercase, number, and special character
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Password updated successfully
                        
  /users/{id}/security-settings:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: User ID
        
    get:
      tags:
        - Security
      summary: Get security settings
      description: Retrieve user security settings
      responses:
        '200':
          description: Security settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/SecuritySettings'
                    
    put:
      tags:
        - Security
      summary: Update security settings
      description: Update user security settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionTimeout:
                  type: integer
                allowMultipleSessions:
                  type: boolean
                requirePasswordChangeEvery:
                  type: integer
      responses:
        '200':
          description: Security settings updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/SecuritySettings'
                    
  # Session Management
  /users/{id}/sessions:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: User ID
        
    get:
      tags:
        - Session Management
      summary: List user sessions
      description: Retrieve list of active user sessions
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSession'
                      
    post:
      tags:
        - Session Management
      summary: Create session
      description: Create a new user session record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userAgent
                - loginTime
              properties:
                userAgent:
                  type: string
                loginTime:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserSession'
                    
  /users/{id}/sessions/{sessionId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: User ID
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
        description: Session ID
        
    delete:
      tags:
        - Session Management
      summary: Terminate session
      description: Terminate a specific user session
      responses:
        '200':
          description: Session terminated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Session terminated successfully
                        
  # User Invitations
  /user-invitations:
    get:
      tags:
        - User Invitations
      summary: List invitations
      description: List user invitations with optional filtering
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, accepted, expired, cancelled]
          description: Filter by invitation status
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of results to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Pagination offset
      responses:
        '200':
          description: List of invitations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserInvitation'
                      
    post:
      tags:
        - User Invitations
      summary: Create invitation
      description: Create a new user invitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - role
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [admin, manager, employee]
                department:
                  type: string
                jobTitle:
                  type: string
                hourlyRate:
                  type: number
                  format: float
                permissions:
                  type: object
                  properties:
                    features:
                      type: array
                      items:
                        type: string
                    projects:
                      type: array
                      items:
                        type: string
                personalMessage:
                  type: string
      responses:
        '201':
          description: Invitation created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserInvitation'
                    
  /user-invitations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Invitation ID
        
    delete:
      tags:
        - User Invitations
      summary: Cancel invitation
      description: Cancel a pending invitation
      responses:
        '200':
          description: Invitation cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Invitation cancelled successfully
                        
  /user-invitations/{id}/resend:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Invitation ID
        
    post:
      tags:
        - User Invitations
      summary: Resend invitation
      description: Resend an invitation email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                extendExpiration:
                  type: boolean
                  default: true
                personalMessage:
                  type: string
      responses:
        '200':
          description: Invitation resent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserInvitation'
                    
  /user-invitations/validate/{token}:
    parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
        description: Invitation token
        
    get:
      tags:
        - User Invitations
      summary: Validate invitation token
      description: Validate an invitation token (public endpoint)
      security: []
      responses:
        '200':
          description: Token validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      valid:
                        type: boolean
                      invitation:
                        $ref: '#/components/schemas/UserInvitation'
                        
  /user-invitations/accept:
    post:
      tags:
        - User Invitations
      summary: Accept invitation
      description: Accept an invitation and create user account (public endpoint)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - userData
              properties:
                token:
                  type: string
                userData:
                  type: object
                  required:
                    - name
                    - password
                  properties:
                    name:
                      type: string
                    password:
                      type: string
                      minLength: 8
                    preferences:
                      $ref: '#/components/schemas/UserPreferences'
      responses:
        '201':
          description: Invitation accepted and user created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      message:
                        type: string
                        example: Account created successfully

  # Project Management Endpoints - Phase 5
  /projects:
    get:
      tags:
        - Project Management
      summary: List projects
      description: Retrieve a list of projects with optional filtering and pagination
      parameters:
        - name: clientId
          in: query
          schema:
            type: string
          description: Filter by client ID
        - name: status
          in: query
          schema:
            type: string
            enum: [active, completed, on_hold, cancelled]
          description: Filter by project status
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of results to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Pagination offset
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      projects:
                        type: array
                        items:
                          $ref: '#/components/schemas/Project'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                          limit:
                            type: integer
                          offset:
                            type: integer
                          hasMore:
                            type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      tags:
        - Project Management
      summary: Create project
      description: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - clientId
              properties:
                name:
                  type: string
                  description: Project name
                description:
                  type: string
                  description: Project description
                clientId:
                  type: string
                  description: Client ID for this project
                status:
                  type: string
                  enum: [active, completed, on_hold, cancelled]
                  default: active
                  description: Project status
                startDate:
                  type: string
                  format: date
                  description: Project start date (YYYY-MM-DD)
                endDate:
                  type: string
                  format: date
                  description: Project end date (YYYY-MM-DD)
                budget:
                  type: number
                  format: float
                  description: Project budget
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Project'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Project ID
        
    put:
      tags:
        - Project Management
      summary: Update project
      description: Update an existing project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                clientId:
                  type: string
                status:
                  type: string
                  enum: [active, completed, on_hold, cancelled]
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                budget:
                  type: number
                  format: float
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Project'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    delete:
      tags:
        - Project Management
      summary: Delete project
      description: Delete a project (only if no time entries exist)
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Project deleted successfully
        '400':
          description: Cannot delete project with existing time entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Client Management Endpoints - Phase 5
  /clients:
    get:
      tags:
        - Client Management
      summary: List clients
      description: Retrieve a list of clients with optional filtering and pagination
      parameters:
        - name: isActive
          in: query
          schema:
            type: boolean
          description: Filter by active status
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of results to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Pagination offset
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      clients:
                        type: array
                        items:
                          $ref: '#/components/schemas/Client'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                          limit:
                            type: integer
                          offset:
                            type: integer
                          hasMore:
                            type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      tags:
        - Client Management
      summary: Create client
      description: Create a new client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  description: Client name
                email:
                  type: string
                  format: email
                  description: Client email address
                phone:
                  type: string
                  description: Client phone number
                address:
                  type: string
                  description: Client address
                contactPerson:
                  type: string
                  description: Primary contact person
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Client'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /clients/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Client ID
        
    put:
      tags:
        - Client Management
      summary: Update client
      description: Update an existing client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                address:
                  type: string
                contactPerson:
                  type: string
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Client'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    delete:
      tags:
        - Client Management
      summary: Delete client
      description: Soft delete a client (sets isActive to false). Cannot delete clients with active projects.
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Client deleted successfully
        '400':
          description: Cannot delete client with active projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Time Tracking Endpoints - Phase 4
  /time-entries:
    get:
      tags:
        - Time Tracking
      summary: List time entries
      description: Retrieve time entries with optional filtering and pagination
      parameters:
        - name: userId
          in: query
          schema:
            type: string
          description: Filter by user ID (managers/admins can view all users)
        - name: projectId
          in: query
          schema:
            type: string
          description: Filter by project ID
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, submitted, approved, rejected]
          description: Filter by entry status
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Filter entries from this date (YYYY-MM-DD)
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Filter entries to this date (YYYY-MM-DD)
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of results to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Pagination offset
      responses:
        '200':
          description: List of time entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      entries:
                        type: array
                        items:
                          $ref: '#/components/schemas/TimeEntry'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                          limit:
                            type: integer
                          offset:
                            type: integer
                          hasMore:
                            type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      tags:
        - Time Tracking
      summary: Create time entry
      description: Create a new time entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - projectId
                - description
                - date
                - duration
              properties:
                projectId:
                  type: string
                  description: Project ID for this time entry
                taskId:
                  type: string
                  description: Optional task ID within the project
                description:
                  type: string
                  description: Description of work performed
                date:
                  type: string
                  format: date
                  description: Date of work (YYYY-MM-DD)
                startTime:
                  type: string
                  format: date-time
                  description: Start time (for timer entries)
                endTime:
                  type: string
                  format: date-time
                  description: End time (for timer entries)
                duration:
                  type: integer
                  description: Duration in minutes
                isBillable:
                  type: boolean
                  default: true
                  description: Whether this time is billable
                hourlyRate:
                  type: number
                  format: float
                  description: Override hourly rate for this entry
                tags:
                  type: array
                  items:
                    type: string
                  description: Tags for categorizing the entry
                attachments:
                  type: array
                  items:
                    type: string
                  description: File attachment URLs
      responses:
        '201':
          description: Time entry created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/TimeEntry'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /time-entries/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Time entry ID
        
    put:
      tags:
        - Time Tracking
      summary: Update time entry
      description: Update an existing time entry (only draft entries can be updated)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: string
                taskId:
                  type: string
                description:
                  type: string
                date:
                  type: string
                  format: date
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
                duration:
                  type: integer
                isBillable:
                  type: boolean
                hourlyRate:
                  type: number
                  format: float
                tags:
                  type: array
                  items:
                    type: string
                attachments:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Time entry updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/TimeEntry'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Cannot update submitted/approved entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    delete:
      tags:
        - Time Tracking
      summary: Delete time entry
      description: Delete a time entry (only draft entries can be deleted)
      responses:
        '200':
          description: Time entry deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Time entry deleted successfully
        '403':
          description: Cannot delete submitted/approved entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Time entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /time-entries/submit:
    post:
      tags:
        - Time Tracking
      summary: Submit time entries for approval
      description: Submit multiple time entries for manager approval
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - entryIds
              properties:
                entryIds:
                  type: array
                  items:
                    type: string
                  description: Array of time entry IDs to submit
                comment:
                  type: string
                  description: Optional comment for the submission
      responses:
        '200':
          description: Time entries submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      submitted:
                        type: array
                        items:
                          type: string
                        description: Successfully submitted entry IDs
                      failed:
                        type: array
                        items:
                          type: object
                          properties:
                            entryId:
                              type: string
                            error:
                              type: string
                        description: Failed submissions with reasons
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /time-entries/approve:
    post:
      tags:
        - Time Tracking
      summary: Approve time entries
      description: Approve submitted time entries (managers/admins only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - entryIds
              properties:
                entryIds:
                  type: array
                  items:
                    type: string
                  description: Array of time entry IDs to approve
                comment:
                  type: string
                  description: Optional approval comment
      responses:
        '200':
          description: Time entries approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      approved:
                        type: array
                        items:
                          type: string
                        description: Successfully approved entry IDs
                      failed:
                        type: array
                        items:
                          type: object
                          properties:
                            entryId:
                              type: string
                            error:
                              type: string
                        description: Failed approvals with reasons
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /time-entries/reject:
    post:
      tags:
        - Time Tracking
      summary: Reject time entries
      description: Reject submitted time entries (managers/admins only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - entryIds
                - reason
              properties:
                entryIds:
                  type: array
                  items:
                    type: string
                  description: Array of time entry IDs to reject
                reason:
                  type: string
                  description: Reason for rejection (required)
                comment:
                  type: string
                  description: Additional comments
      responses:
        '200':
          description: Time entries rejected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      rejected:
                        type: array
                        items:
                          type: string
                        description: Successfully rejected entry IDs
                      failed:
                        type: array
                        items:
                          type: object
                          properties:
                            entryId:
                              type: string
                            error:
                              type: string
                        description: Failed rejections with reasons
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Phase 6 - Reporting & Analytics Endpoints
  /reports/time:
    post:
      tags:
        - Reporting & Analytics
      summary: Generate time report
      description: Generate comprehensive time tracking reports with filtering and grouping options
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                  description: Report start date (YYYY-MM-DD)
                endDate:
                  type: string
                  format: date
                  description: Report end date (YYYY-MM-DD)
                groupBy:
                  type: string
                  enum: [date, week, month, project, user, client]
                  default: date
                  description: How to group the report data
                includeDetails:
                  type: boolean
                  default: true
                  description: Include detailed time entries
                filters:
                  type: object
                  properties:
                    userId:
                      type: string
                      description: Filter by specific user
                    projectId:
                      type: string
                      description: Filter by specific project
                    clientId:
                      type: string
                      description: Filter by specific client
                    billable:
                      type: boolean
                      description: Filter by billable status
                    status:
                      type: string
                      enum: [draft, submitted, approved, rejected]
                      description: Filter by entry status
                sortBy:
                  type: string
                  enum: [date, hours, revenue, project, user]
                  default: date
                  description: Sort field
                sortOrder:
                  type: string
                  enum: [asc, desc]
                  default: desc
                  description: Sort order
                limit:
                  type: integer
                  default: 100
                  maximum: 1000
                  description: Maximum number of results
                offset:
                  type: integer
                  default: 0
                  description: Pagination offset
      responses:
        '200':
          description: Time report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/TimeReport'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reports/projects:
    post:
      tags:
        - Reporting & Analytics
      summary: Generate project report
      description: Generate comprehensive project performance and analytics reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                includeFinancials:
                  type: boolean
                  default: true
                  description: Include financial metrics
                includeTeamMetrics:
                  type: boolean
                  default: true
                  description: Include team performance metrics
                groupBy:
                  type: string
                  enum: [project, client, status, month]
                  default: project
                filters:
                  type: object
                  properties:
                    projectId:
                      type: string
                    clientId:
                      type: string
                    status:
                      type: string
                      enum: [active, completed, on_hold, cancelled]
                    managerId:
                      type: string
      responses:
        '200':
          description: Project report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProjectReport'

  /reports/clients:
    post:
      tags:
        - Reporting & Analytics
      summary: Generate client report
      description: Generate client performance, billing, and activity reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                includeBilling:
                  type: boolean
                  default: true
                includeActivity:
                  type: boolean
                  default: true
                includeInvoices:
                  type: boolean
                  default: true
                filters:
                  type: object
                  properties:
                    clientId:
                      type: string
                    isActive:
                      type: boolean
                    minRevenue:
                      type: number
                      format: float
      responses:
        '200':
          description: Client report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ClientReport'

  /reports/export:
    post:
      tags:
        - Reporting & Analytics
      summary: Export report
      description: Export reports in various formats (PDF, CSV, Excel)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reportData
                - format
              properties:
                reportData:
                  type: object
                  description: Report data to export
                format:
                  type: string
                  enum: [pdf, csv, excel]
                  description: Export format
                options:
                  type: object
                  properties:
                    includeCharts:
                      type: boolean
                      default: true
                    includeRawData:
                      type: boolean
                      default: true
                    orientation:
                      type: string
                      enum: [portrait, landscape]
                      default: portrait
                    pageSize:
                      type: string
                      enum: [A4, Letter, Legal]
                      default: A4
                delivery:
                  type: object
                  properties:
                    email:
                      type: array
                      items:
                        type: string
                        format: email
                      description: Email addresses to send the report
                    subject:
                      type: string
                      description: Email subject
                    message:
                      type: string
                      description: Email message
                    downloadLink:
                      type: boolean
                      default: true
                      description: Include download link
                    expiresIn:
                      type: integer
                      default: 24
                      description: Download link expiration in hours
      responses:
        '200':
          description: Report export initiated (placeholder implementation)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Placeholder endpoint - implementation pending"

  /reports/schedule:
    post:
      tags:
        - Reporting & Analytics
      summary: Schedule report
      description: Create automated report scheduling with EventBridge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reportConfigId
                - schedule
                - delivery
              properties:
                reportConfigId:
                  type: string
                  description: Report configuration ID
                schedule:
                  $ref: '#/components/schemas/ScheduleConfig'
                delivery:
                  $ref: '#/components/schemas/DeliveryConfig'
                enabled:
                  type: boolean
                  default: true
                  description: Whether the schedule is enabled
      responses:
        '201':
          description: Report schedule created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ScheduleResponse'
        '400':
          description: Invalid schedule configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Reporting & Analytics
      summary: List scheduled reports
      description: Get list of scheduled reports for the current user
      parameters:
        - name: enabled
          in: query
          schema:
            type: boolean
          description: Filter by enabled status
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of results to return
      responses:
        '200':
          description: List of scheduled reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      schedules:
                        type: array
                        items:
                          $ref: '#/components/schemas/ScheduledReport'
                      totalCount:
                        type: integer

  /reports/schedule/{scheduleId}:
    parameters:
      - name: scheduleId
        in: path
        required: true
        schema:
          type: string
        description: Schedule ID

    get:
      tags:
        - Reporting & Analytics
      summary: Get scheduled report
      description: Get details of a specific scheduled report
      responses:
        '200':
          description: Scheduled report details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ScheduledReport'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Reporting & Analytics
      summary: Update scheduled report
      description: Update an existing report schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                schedule:
                  $ref: '#/components/schemas/ScheduleConfig'
                delivery:
                  $ref: '#/components/schemas/DeliveryConfig'
                enabled:
                  type: boolean
      responses:
        '200':
          description: Schedule updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ScheduleResponse'

    delete:
      tags:
        - Reporting & Analytics
      summary: Delete scheduled report
      description: Delete a report schedule and associated EventBridge rule
      responses:
        '200':
          description: Schedule deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ScheduleResponse'

  /analytics/dashboard/enhanced:
    post:
      tags:
        - Reporting & Analytics
      summary: Generate enhanced dashboard
      description: Generate customizable dashboard with widgets, KPIs, and real-time data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                widgets:
                  type: array
                  items:
                    $ref: '#/components/schemas/DashboardWidget'
                  description: Dashboard widgets configuration
                timeframe:
                  type: string
                  enum: [day, week, month, quarter, year]
                  default: month
                  description: Data timeframe
                realTime:
                  type: boolean
                  default: false
                  description: Enable real-time updates
                includeForecasting:
                  type: boolean
                  default: true
                  description: Include forecasting data
                includeBenchmarks:
                  type: boolean
                  default: true
                  description: Include benchmark comparisons
      responses:
        '200':
          description: Enhanced dashboard generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/EnhancedDashboard'

  /analytics/real-time:
    post:
      tags:
        - Reporting & Analytics
      summary: Get real-time analytics
      description: Retrieve real-time system and user analytics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metrics:
                  type: array
                  items:
                    type: string
                    enum: [activeUsers, currentSessions, todayHours, todayRevenue, liveTimers]
                  description: Metrics to include
                includeActivities:
                  type: boolean
                  default: true
                  description: Include recent activities
                includeSessions:
                  type: boolean
                  default: true
                  description: Include session information
                includeAlerts:
                  type: boolean
                  default: true
                  description: Include system alerts
                refreshInterval:
                  type: integer
                  default: 30
                  description: Refresh interval in seconds
      responses:
        '200':
          description: Real-time analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/RealTimeAnalytics'

  /analytics/performance:
    post:
      tags:
        - Reporting & Analytics
      summary: Get performance monitoring
      description: Retrieve system performance metrics and monitoring data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                timeframe:
                  type: string
                  enum: [hour, day, week, month]
                  default: day
                  description: Performance data timeframe
                metrics:
                  type: array
                  items:
                    type: string
                    enum: [system, api, database, user]
                  description: Metric categories to include
                includeRecommendations:
                  type: boolean
                  default: true
                  description: Include performance recommendations
                includeAlerts:
                  type: boolean
                  default: true
                  description: Include performance alerts
                includeComparisons:
                  type: boolean
                  default: true
                  description: Include period comparisons
      responses:
        '200':
          description: Performance monitoring data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/PerformanceMonitoring'

  /analytics/events:
    post:
      tags:
        - Reporting & Analytics
      summary: Track analytics event
      description: Track user actions and system events for analytics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventType
              properties:
                eventType:
                  type: string
                  enum: [
                    user_login, user_logout, user_profile_update, user_preferences_update, user_action,
                    timer_start, timer_stop, timer_pause, time_entry_create, time_entry_update, time_entry_delete,
                    time_entry_submit, time_entry_approve, time_entry_reject, project_create, project_update,
                    project_delete, project_view, client_create, client_update, client_delete, client_view,
                    report_generate, report_export, report_schedule, dashboard_view, api_error,
                    performance_metric, feature_usage
                  ]
                  description: Type of event to track
                metadata:
                  type: object
                  description: Additional event metadata
                timestamp:
                  type: string
                  format: date-time
                  description: Event timestamp (defaults to current time)
      responses:
        '201':
          description: Event tracked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      eventId:
                        type: string
                        description: Unique event identifier
                      timestamp:
                        type: string
                        format: date-time
                        description: Event timestamp
                      message:
                        type: string
                        example: "Event tracked successfully"
        '400':
          description: Invalid event type or data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: "RATE_LIMIT_EXCEEDED"
                      message:
                        type: string
                        example: "Too many events. Please try again later."
                      retryAfter:
                        type: integer
                        example: 60

  /analytics/filter:
    post:
      tags:
        - Reporting & Analytics
      summary: Advanced data filtering
      description: Apply complex filters, aggregations, and transformations to data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - dataSource
                - filters
              properties:
                dataSource:
                  type: string
                  enum: [time-entries, projects, clients, users, analytics-events]
                  description: Data source to filter
                filters:
                  type: array
                  items:
                    $ref: '#/components/schemas/FilterCondition'
                  description: Filter conditions
                groupBy:
                  type: object
                  properties:
                    fields:
                      type: array
                      items:
                        type: string
                      description: Fields to group by
                    dateGrouping:
                      type: string
                      enum: [hour, day, week, month, quarter, year]
                      description: Date grouping interval
                aggregations:
                  type: array
                  items:
                    $ref: '#/components/schemas/Aggregation'
                  description: Aggregation functions
                sorting:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      direction:
                        type: string
                        enum: [asc, desc]
                  description: Sorting configuration
                pagination:
                  type: object
                  properties:
                    limit:
                      type: integer
                      default: 50
                      maximum: 1000
                    offset:
                      type: integer
                      default: 0
                outputFormat:
                  type: string
                  enum: [summary, detailed, raw]
                  default: detailed
                  description: Output format
      responses:
        '200':
          description: Filtered data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/FilterResult'

tags:
  - name: User Management
    description: User account management operations
  - name: User Profile
    description: User profile information management
  - name: User Preferences
    description: User preferences and settings
  - name: Security
    description: Security and authentication operations
  - name: Session Management
    description: User session management
  - name: User Invitations
    description: User invitation system
  - name: Project Management
    description: Project lifecycle management
  - name: Client Management
    description: Client information management
  - name: Time Tracking
    description: Time entry and tracking operations
  - name: Reporting & Analytics
    description: Advanced reporting, analytics, and business intelligence
  - name: Invoice Management
    description: Invoice generation and management